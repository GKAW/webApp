{"version":3,"sources":["components/utils/APIService.js","components/SetUpJS/SetUpMetadata.js","components/SetUpJS/SetUpChemdata.js","components/NotionClone/utils/uid.js","components/SetUp.js","components/AutoLoadJS/PipetteTypeSelector.js","components/AutoLoadJS/InducerSelector.js","components/AutoLoadJS/ScriptSelector.js","components/AutoLoadJS/DiluentInfo.js","components/AutoLoad.js","components/TestFlask.js","components/Analyse/FileUpload.js","components/Analyse/GenerateHeatmap.js","components/Analyse.js","components/Inspector.js","components/NotionClone/selectMenu.js","components/NotionClone/plateOptions.js","components/NotionClone/plateObject.js","components/NotionClone/utils/caretHelpers.js","components/NotionClone/editableBlock.js","components/NotionClone/utils/usePrevious.js","components/NotionClone/EditablePage.js","components/Notes.js","components/ButtonAppBar.js","components/LoginPage.js","components/SignupPage.js","components/PageSelectObject.js","components/SideBar.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL_AWS","APIService","body","fetch","headers","JSON","stringify","then","response","json","catch","error","console","log","blocks","plate","plate_id","useStyles","makeStyles","theme","root","margin","spacing","width","well_numbers","value","label","SetUpMetadata","props","classes","useState","formValidate","useEffect","setwell_number","well_number","Fragment","Typography","variant","className","noValidate","autoComplete","TextField","id","select","onChange","event","target","newMetadata","blank_border","replicate_number","setMetadata","updatePlateMetadata","metadata","page_id","activePage","activePlate","required","map","option","MenuItem","type","defaultValue","setreplicate_number","InputLabelProps","shrink","FormControlLabel","control","Checkbox","setblank_border","checked","labelPlacement","wellNumbers","SetUpChemdata","onChange_log_scale","bind","onChange_exclude_neg_control","onChange_low_conc","onChange_high_conc","onChange_n_conditions","onChange_name","onChange_manualSetup","delete_chemical","onChange_conc_list","state","name","low_conc","high_conc","conc_list","n_conditions","exclude_neg_control","log_scale","index","manualSetup","this","setState","stock_concentration","source_labware","pass_chem_info","deleteChemicalHandler","prevProps","prevState","nameChanged","low_concChanged","high_concChanged","n_conditionsChanged","exclude_neg_controlChanged","log_scaleChanged","manualSetup_changed","conc_listChanged","updatedChemical","updateChemical","e","Divider","Stack","direction","alignItems","Switch","Button","color","onClick","React","Component","withStyles","uid","Date","now","toString","Math","random","substr","SetUp","currentChemical","chemicals","chemical","indexOf","updatedChemicals","splice","setChemicals","updateChemicalHandler","newChemical","currentPlate","pipette_options","tip_type","tiprack_options","p20type","p300type","p1000type","PipetteTypeSelector","pipette_left","pipette_right","includes","setTipTypeLeft","setTipTypeRight","tip_type_right","tip_type_left","handleChange_pipetteLeft","handleChange_pipetteRight","tips_left","handleChange_tipsLeft","tips_right","handleChange_tipsRight","plateTypes","InducerSelector","onChange_source_labware","onChange_stock_concentration","plateType","chemName","labwareChanged","stockConcChanged","ScriptSelector","destinationPlate","setDestinationPlate","newLoadingInfo","inducerMixVolume","finalVolume","dilutionFactor","updateLoadingInfo","loadingInfo","setInducerMixVolume","dilFactor","setDilutionFactor","setFinalVolume","totalVol","DiluentInfo","diluentLabware","setDiluentLabware","diluentInfo","labware","updateDiluentInfo","diluent_info","AutoLoad","setSourceLabware","handleChange_sourceLabware","setPipetteLeft","pipetteSetup","update_pipette_setup","setPipetteRight","setTipsLeft","setTipsRight","autoload_metadata","dest_labware","diluent_labware","plateInfo","process_template","success","link","document","createElement","download","href","click","size","button","startIcon","TestFlask","background","border","fontSize","borderRadius","textAlign","height","padding","fillAll","marginAll","cursor","FileUpload","onDrop","acceptedFiles","files","data","FormData","append","method","setUploadToken","onUpload","getRootProps","getInputProps","flexGrow","backgroundColor","palette","paper","MaxWidth","maxHeight","justifyContent","justifyItems","display","topPad","marginTop","marginBottom","GenerateHeatmap","generate_heatmap","setImageToken","token","windowTabChange","uploadToken","element","file","Blob","image_token","URL","createObjectURL","src","Analyse","uploadReady","setUploadReady","TabPanel","children","other","role","hidden","Box","p","a11yProps","Inspector","setValue","AppBar","position","Tabs","newValue","handlePlateChange","centered","Tab","allowedTags","tag","isPlate","SelectMenu","keyDownHandler","command","items","selectedItem","addEventListener","matchSorter","keys","removeEventListener","selected","key","preventDefault","onSelect","close","substring","length","prevSelected","nextSelected","x","positionAttributes","top","y","left","style","item","isSelected","tabIndex","PlateObject","onSelectHandler","closePlateOptions","openPlateOptions","onDeleteHandler","plateMenuIsOpen","isActivePlate","selectColor","setActivePlate","deletePlate","htmlChanged","html","tagChanged","isPlateChanged","activePlateChanged","updateBlock","undefined","open","onClose","anchorEl","plateMenuPosition","MenuListProps","setCaretToEnd","range","createRange","selection","window","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","focus","EditableBlock","onChangeHandler","onKeyDownHandler","onKeyUpHandler","openSelectMenuHandler","closeSelectMenuHandler","tagSelectionHandler","contentEditable","createRef","htmlBackup","previousKey","selectMenuIsOpen","selectMenuPosition","addBlock","ref","current","deleteBlock","rangeCount","getRangeAt","cloneRange","rect","getClientRects","getCaretCoordinates","innerRef","tagName","onKeyDown","onKeyUp","usePrevious","useRef","initialBlock","EditablePage","setBlocks","currentBlockId","setCurrentBlockId","prevBlocks","isLoggedIn","PostBlocks","nextBlockPosition","b","nextBlock","querySelector","lastBlockPosition","lastBlock","updateBlockHandler","currentBlock","updatedBlocks","activeBlock","addBlockHandler","newBlock","deleteBlockHandler","deletePlateHandler","block","updateActivePlate","Notes","activePage_name","setActivePage_name","updatePageName","page_name","handleSetPages","pages","handleSetBlocks","menuButton","marginRight","title","ButtonAppBar","Toolbar","IconButton","edge","setSideBarOpen","sideBarOpen","currentUsername","handleClickOpenSignUp","handleClickOpen","logout","setCurrentUsername","username","setIsLoggedIn","logged_in","LoginPage","loginEmail","setLoginEmail","loginPassword","setLoginPassword","loginRemember","setLoginRemember","handleClose","Dialog","DialogTitle","DialogContent","autoFocus","fullWidth","DialogActions","PostLogin","updateActivePage","emailError","setEmailError","nameError","setNameError","passwordError","setPasswordError","validate","setValidate","signupSuccessful","setSignupSuccessful","user_email","setUserEmail","user_name","setUserName","user_pass","setUserPass","DialogContentText","signupRequest","sign_up","user_email_error","user_pass_error","user_name_error","PageSelectObject","isActivePage","handlePageChange","textTransform","SideBar","Drawer","anchor","sx","pt","pl","newPage","addNewPage","List","page","styleTextPanel","overflowY","styleSidePanel","App","new_blocks","setPages","new_pages","darkMode","setDarkMode","setActivePage","switchPage","GetPlate","loading_info","setOpen","openSignUp","setOpenSignUp","changeMode","prev","SignupPage","split","defaultSize","pane1Style","pane2Style","PostPlates","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ed143621.chunk.js","sourcesContent":["// Thanks to github.com/Dev-Elie/Sending-Data-from-React-to-Flask (MIT License)\n// const API_URL_AWS = 'http://ec2-3-145-8-106.us-east-2.compute.amazonaws.com'\nconst API_URL_AWS = ''\n\nexport default class APIService {\n    static sign_up(body) {\n        return fetch(`${API_URL_AWS}/sign_up`, {\n            'method': 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .catch(error => console.log(error))\n    }\n\n    static process_template(body) {\n        return fetch(`${API_URL_AWS}/process_template`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static delete_chemical(body) {\n        return fetch(`${API_URL_AWS}/delete_chemical`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static generate_heatmap(body) {\n        return fetch(`${API_URL_AWS}/generate_heatmap`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n\n    static GetPlate(body) {\n        return fetch(`${API_URL_AWS}/getplate`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static PostLogin(body) {\n        return fetch(`${API_URL_AWS}/login`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static addNewPage(body) {\n        return fetch(`${API_URL_AWS}/add_new_page`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static switchPage(body) {\n        return fetch(`${API_URL_AWS}/switch_page`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static updatePageName(body) {\n        return fetch(`${API_URL_AWS}/update_page_name`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static logout() {\n        return fetch(`${API_URL_AWS}/logout`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static update_pipette_setup(body) {\n        return fetch(`${API_URL_AWS}/update_pipette_setup`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static updateDiluentInfo(body) {\n        return fetch(`${API_URL_AWS}/update_diluent_info`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static updateLoadingInfo(body) {\n        return fetch(`${API_URL_AWS}/update_loading_info`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n\n    static async PostBlocks(blocks) {\n        try {\n            const response = await fetch(`${API_URL_AWS}/postblocks`, {\n                'method': 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(blocks)\n            })\n            return await response.json()\n        } catch (error) {\n            return console.log(error)\n        }\n    }\n\n    static PostPlates(plate) {\n        return fetch(`${API_URL_AWS}/postplates`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(plate)\n        })\n        .then(response => response.json())\n        .catch(error => console.log(error))\n    }\n\n    static updatePlateMetadata(plate) {\n        return fetch(`${API_URL_AWS}/update_plate_metadata`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(plate)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static deletePlate(plate) {\n        return fetch(`${API_URL_AWS}/delete_plate`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(plate)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n    static PostFile(body, plate_id) {\n        return fetch(`${API_URL_AWS}/upload_test/${plate_id}`, {\n            'method': 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => response.json())\n            .catch(error => console.log(error))\n    }\n\n};","import React, { useState, useEffect } from 'react';\nimport { Button, TextField, MenuItem, Checkbox, FormControlLabel, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n// import CatchingPokemonIcon from '@material-ui/icons/CatchingPokemon';\nimport APIService from '../utils/APIService';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nconst plateTypes = {\n    96: [\n        {\n            value: 'plate96_1longName',\n            label: 'p96_1short',\n        },\n        {\n            value: 'plate96_2longName',\n            label: 'p96_2short',\n        }\n    ],\n\n    12: [\n        {\n            value: 'plate12_1longName',\n            label: 'p12_1short',\n        },\n        {\n            value: 'plate12_2longName',\n            label: 'p12_2short',\n        }\n    ],\n};\n\nconst well_numbers = [\n    {\n        value: 384,\n        label: 384,\n    },\n    {\n        value: 96,\n        label: 96,\n    },\n    {\n        value: 24,\n        label: 24,\n    },\n    {\n        value: 12,\n        label: 12,\n    }\n]\n\n\nfunction SetUpMetadata(props) {\n    const classes = useStyles();\n    // const [plateType, setPlateType] = useState('');\n\n    const [submitReady, setSubmitReady] = useState(false);\n\n    const [formValidate, setFormValidate] = useState(false)\n\n\n    const onFormValidate = () => {\n        setFormValidate(true)\n    }\n    // PLACEHOLDER ATM. needs to check if max_wells is exceeded.\n     /*\n    useEffect(() => {\n        if (( well_number )) {\n            setSubmitReady(true)\n        } else { setSubmitReady(false) }\n        // console.log('triggered useEffect: ')\n        // console.log(submitReady)\n    }, [blank_border, well_number, replicate_number, submitReady])\n    */\n    /*\n    const prevMetadata = props.metadata\n    useEffect(() => {\n        if (prevMetadata !== { blank_border: blank_border, well_number: well_number, replicate_number: replicate_number }) {\n            console.log('updated metadata')\n            props.setMetadata({ blank_border: blank_border, well_number: well_number, replicate_number: replicate_number });\n        }\n    }, [blank_border, well_number, replicate_number, prevMetadata])\n    */\n\n    // event listeners\n    const handleChange_blank_border = (event) => {\n        props.setblank_border(event.target.checked);\n        const newMetadata = {\n            blank_border: event.target.checked,\n            well_number: props.well_number,\n            replicate_number: props.replicate_number\n        }\n        props.setMetadata(newMetadata)\n        APIService.updatePlateMetadata({ metadata: newMetadata, page_id: props.activePage, plate_id: props.activePlate })\n\n    };\n\n    const handleChange_replicate_number = (event) => {\n        props.setreplicate_number(event.target.value);\n        const newMetadata = {\n            blank_border: props.blank_border,\n            well_number: props.well_number,\n            replicate_number: event.target.value\n        }\n        props.setMetadata(newMetadata)\n        APIService.updatePlateMetadata({ metadata: newMetadata, page_id: props.activePage, plate_id: props.activePlate })\n\n    };\n\n    const handleChange_well_number = (event) => {\n        props.setwell_number(event.target.value);\n        const newMetadata = {\n            blank_border: props.blank_border,\n            well_number: event.target.value,\n            replicate_number: props.replicate_number\n        }\n        props.setMetadata(newMetadata)\n        APIService.updatePlateMetadata({metadata: newMetadata, page_id: props.activePage, plate_id: props.activePlate})\n        //console.log(props.well_number)\n    };\n\n    useEffect(() => {\n        props.setwell_number(props.well_number)\n        console.log(props.well_number)\n    }, [props.well_number, props.setwell_number])\n\n    // API call on click\n    const onClickTest = () => {\n        console.log(props.activePlate)\n        // creates folder for active plate if not exists.\n        // should write csvs accordingly and create metadata.json\n        APIService.PostFile('body', props.activePlate)\n    }\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\">Plate metadata</Typography>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            \n                <TextField\n                    id=\"outlined-select-well_number\"\n                    select\n                    label=\"Well number\"\n                    value={props.well_number}\n                    onChange={handleChange_well_number}\n                    // helperText=\"Well number\"\n                    variant=\"outlined\"\n                    required=\"true\"\n                    error={!formValidate || props.well_number ? '' : 'true'}\n                >\n                    {well_numbers.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                \n                </TextField>\n\n                <TextField\n                    id=\"outlined-number-replicates\"\n                    label=\"Replicates\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    required=\"true\"\n                    defaultValue={props.replicate_number}\n                    value={props.replicate_number}\n                    onChange={handleChange_replicate_number}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                \n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            onChange={handleChange_blank_border}\n                            checked={props.blank_border}\n                        />\n                    }\n                    label=\"Blank Media Border\"\n                    labelPlacement=\"bottom\"\n                />\n            \n            </form>\n\n        </React.Fragment>\n\n    );\n}\n\nexport default SetUpMetadata;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, TextField, MenuItem, FormControlLabel, Checkbox, Divider, Typography } from '@material-ui/core';\nimport { Stack, Switch } from '@mui/material';\n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport APIService from '../utils/APIService';\n\nconst wellNumbers = [\n    {\n        value: true,\n        label: \"log uniform\",\n    },\n    {\n        value: false,\n        label: \"uniform\",\n    }\n]\nconst useStyles = (theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n});\n\n\nclass SetUpChemdata extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange_log_scale = this.onChange_log_scale.bind(this);\n        this.onChange_exclude_neg_control = this.onChange_exclude_neg_control.bind(this);\n        this.onChange_low_conc = this.onChange_low_conc.bind(this);\n        this.onChange_high_conc = this.onChange_high_conc.bind(this);\n        this.onChange_n_conditions = this.onChange_n_conditions.bind(this);\n        this.onChange_name = this.onChange_name.bind(this);\n        this.onChange_manualSetup = this.onChange_manualSetup.bind(this);\n        this.delete_chemical = this.delete_chemical.bind(this);\n        this.onChange_conc_list = this.onChange_conc_list.bind(this);\n        \n        // this.activePlateMount = this.activePlateMount.bind(this);\n\n        this.state = {\n            id: null,\n            name: \"\",\n            low_conc: null,\n            high_conc: null,\n            conc_list: null,\n            n_conditions: null,\n            exclude_neg_control: false,\n            log_scale: true,\n            index: null,\n            manualSetup: null,\n        }\n    };\n\n    // load previously defined set up conditions and initial values\n    componentDidMount() {\n        console.log('SetUpChemdata.js; componentDidMount triggered.')\n        console.log('COMPONENTDIDMOUNT LOGGED HERE')\n        console.log('THIS is not triggering upon plate change, keeping state behind props.')\n        this.setState({\n            id: this.props.id,\n            name: this.props.name,\n            low_conc: this.props.low_conc,\n            high_conc: this.props.high_conc,\n            conc_list: this.props.conc_list,\n\n            n_conditions: this.props.n_conditions,\n            exclude_neg_control: this.props.exclude_neg_control,\n            log_scale: this.props.log_scale,\n            index: this.props.index,\n\n            manualSetup: this.props.manualSetup,\n            \n            // for plate setup\n            stock_concentration: this.props.stock_concentration,\n            source_labware: this.props.source_labware,\n\n        });\n    }\n\n    delete_chemical() {\n        const pass_chem_info = { id: this.props.id }\n        APIService.delete_chemical(pass_chem_info)\n            .then(response => {\n                console.log('SetUpChemicaldata.js; delete_chemical: ', response)\n                this.props.deleteChemicalHandler({ id: this.props.id })\n            })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const nameChanged = prevState.name !== this.state.name;\n        const low_concChanged = prevState.low_conc !== this.state.low_conc;\n        const high_concChanged = prevState.high_conc !== this.state.high_conc;\n        const n_conditionsChanged = prevState.n_conditions !== this.state.n_conditions;\n        const exclude_neg_controlChanged = prevState.exclude_neg_control !== this.state.exclude_neg_control;\n        const log_scaleChanged = prevState.log_scale !== this.state.log_scale;\n        const indexChanged = prevState.index !== this.state.index;\n        const manualSetup_changed = prevState.manualSetup !== this.state.manualSetup;\n        const conc_listChanged = prevState.conc_list !== this.state.conc_list;\n\n        const idChanged = this.state.id !== this.props.id;\n\n        if (idChanged) {\n            this.setState({\n                id: this.props.id,\n                name: this.props.name,\n                low_conc: this.props.low_conc,\n                high_conc: this.props.high_conc,\n                conc_list: this.props.conc_list,\n\n                n_conditions: this.props.n_conditions,\n                exclude_neg_control: this.props.exclude_neg_control,\n                log_scale: this.props.log_scale,\n                index: this.props.index,\n\n                manualSetup: this.props.manualSetup,\n                \n                // for plate setup\n                stock_concentration: this.props.stock_concentration,\n                source_labware: this.props.source_labware,\n            });\n        }\n\n        if (nameChanged || low_concChanged || high_concChanged || n_conditionsChanged || exclude_neg_controlChanged || log_scaleChanged || manualSetup_changed || conc_listChanged) {\n            // console.log('triggered ComponentDidUpdate in SetUpChemdata.js')\n\n            const updatedChemical = {\n                id: this.props.id,\n                name: this.state.name,\n                low_conc: this.state.low_conc,\n                high_conc: this.state.high_conc,\n\n                conc_list: this.state.conc_list,\n                n_conditions: this.state.n_conditions,\n                exclude_neg_control: this.state.exclude_neg_control,\n                log_scale: this.state.log_scale,\n\n                index: this.state.index,\n\n                manualSetup: this.state.manualSetup,\n\n                // for plate setup\n                stock_concentration: this.props.stock_concentration,\n                source_labware: this.props.source_labware,\n\n            }\n\n            console.log('SetUpChemdata.js; componentDidUpdate: updatedChemical: ', updatedChemical)\n\n            this.props.updateChemical(updatedChemical);\n        }\n\n        // console.log('SetUpChemdata.js; componentDidUpdate: chemState: ', chemState)\n\n    }\n\n\n    onChange_exclude_neg_control(e) {\n        this.setState({ exclude_neg_control: e.target.checked });\n    }\n\n    onChange_log_scale(e) {\n        this.setState({ log_scale: e.target.value });\n    }\n\n    onChange_name(e) {\n        this.setState({ name: e.target.value });\n    }\n\n    onChange_low_conc(e) {\n        this.setState({ low_conc: e.target.value });\n    }\n\n    onChange_high_conc(e) {\n        this.setState({ high_conc: e.target.value });\n    }\n\n    onChange_n_conditions(e) {\n        this.setState({ n_conditions: e.target.value });\n    }\n\n    onChange_manualSetup(e) {\n        this.setState({ manualSetup: !this.state.manualSetup });\n    }\n\n    onChange_conc_list(e) {\n        this.setState({ conc_list: e.target.value });\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <React.Fragment>\n                <Divider />\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <Typography variant='h6'>Chemical {this.state.index}: {this.state.name}</Typography>\n\n                    <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Typography>Automatic Setup</Typography>\n                        <Switch\n                            checked={this.state.manualSetup}\n                            onChange={this.onChange_manualSetup}\n                        />\n                        <Typography>Manual Setup</Typography>\n                    </Stack>\n\n                    {this.state.manualSetup ? <Typography>Manual</Typography> : <Typography>Automatic</Typography>}\n\n\n\n                    {this.state.manualSetup ?\n                        <>\n                            <Typography>Manual Setup is active. This feature requires the user to input a list of comma separated values (e.g.: 0.1, 0.5, 0.8, 0.95). Replicates are still generated automatically from the plate metadata. Use the same units throughout (also for your stock solution for this chemical).</Typography>\n                            <TextField\n                                id=\"outlined-text-name\"\n                                label=\"Chemical\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                                InputLabelProps={{ shrink: true }}\n                                defaultValue={this.props.name}\n                                value={this.props.name}\n                                onChange={this.onChange_name}\n                            />\n\n                            <TextField\n                                id=\"outlined-text-name\"\n                                label=\"Manual Concentration Input\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                                InputLabelProps={{ shrink: true }}\n                                defaultValue={this.state.conc_list}\n                                value={this.state.conc_list}\n                                onChange={this.onChange_conc_list}\n                            />\n\n\n                        </>\n                        :\n                        <>\n                            <TextField\n                                id=\"outlined-text-name\"\n                                label=\"Chemical\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                                InputLabelProps={{ shrink: true }}\n                                defaultValue={this.props.name}\n                                value={this.props.name}\n                                onChange={this.onChange_name}\n                            />\n\n                            <TextField\n                                id=\"outlined-number-low\"\n                                label=\"Lowest Concentration (uM)\"\n                                type=\"number\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                                InputLabelProps={{ shrink: true }}\n                                defaultValue={this.props.low_conc}\n                                value={this.props.low_conc}\n                                onChange={this.onChange_low_conc}\n                            />\n\n                            <TextField\n                                id=\"outlined-number-high\"\n                                label=\"Highest Concentration (uM)\"\n                                type=\"number\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                                InputLabelProps={{ shrink: true }}\n                                defaultValue={this.props.high_conc}\n                                value={this.props.high_conc}\n                                onChange={this.onChange_high_conc}\n                            />\n\n                            <TextField\n                                id=\"outlined-number-high\"\n                                label=\"Number of Conditions\"\n                                type=\"number\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                                InputLabelProps={{ shrink: true }}\n                                defaultValue={this.props.n_conditions}\n                                value={this.props.n_conditions}\n                                onChange={this.onChange_n_conditions}\n                            />\n\n                            <TextField\n                                id=\"outlined-select-log_scale\"\n                                select\n                                label=\"log_scale\"\n                                value={this.props.log_scale}\n                                onChange={this.onChange_log_scale}\n                                // helperText=\"Well number\"\n                                variant=\"outlined\"\n                                required=\"true\"\n                            // error={!formValidate || wellNumber ? '' : 'true'}\n                            >\n                                {wellNumbers.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        onChange={this.onChange_exclude_neg_control}\n                                        checked={this.props.exclude_neg_control}\n                                    />\n                                }\n                                label=\"Exclude Negative Control\"\n                                labelPlacement=\"bottom\"\n                            />\n\n                        </>\n                    }\n\n\n\n                </form>\n\n                <Button\n                    variant=\"text\"\n                    color=\"secondary\"\n                    onClick={this.delete_chemical}\n                >\n                    Delete Chemical\n                </Button>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\n/*\nSetUpChemdata.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n*/\nexport default withStyles(useStyles)(SetUpChemdata)\n// export default SetUpChemdata","const uid = () => {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\nexport default uid;","import React, {useState, useEffect} from 'react';\nimport { Typography, Button, Divider } from '@material-ui/core';\nimport FileUpload from './SetUpJS/FileUpload';\nimport SetUpMetadata from './SetUpJS/SetUpMetadata';\nimport SetUpChemdata from './SetUpJS/SetUpChemdata';\nimport APIService from './utils/APIService';\n\nimport uid from \"./NotionClone/utils/uid\";\n\nconst initialChemical = {\n    name: \"\",\n    low_conc: null,\n    high_conc: null,\n    n_conditions: null,\n    exclude_neg_control: false,\n    log_scale: true,\n\n    // for labware setup:\n    stock_concentration: null,\n    source_labware: null,\n}\n\nfunction SetUp(props) {\n\n    const addChemicalHandler = () => {\n        const newChemical = {\n            id: uid(),\n            plate_id: props.currentPlate,\n            name: \"\",\n            low_conc: null,\n            high_conc: null,\n            conc_list: null,\n            manualSetup: false,\n\n            n_conditions: null,\n            exclude_neg_control: false,\n            log_scale: true,\n\n            // for labware setup:\n            stock_concentration: null,\n            source_labware: null,\n        }\n        const updatedChemicals = [...props.chemicals, newChemical]\n        props.setChemicals(updatedChemicals)\n    }\n\n    const deleteChemicalHandler = (currentChemical) => {\n        const index = props.chemicals.map((chemical) => chemical.id).indexOf(currentChemical.id)\n        const updatedChemicals = [...props.chemicals];\n        updatedChemicals.splice(index, 1);\n        props.setChemicals(updatedChemicals)\n    }\n\n    return (\n        <React.Fragment>\n            {/*<Typography variant='h2'>This will be the SetUp app</Typography>\n            <Typography variant='h2'>Active Plate ID:</Typography>\n            <Typography variant='h2'>{props.activePlate}</Typography>*/}\n            {!props.activePlate &&\n                <Typography>Select a plate to get started.</Typography>\n            }\n            \n            {props.activePlate && \n            <SetUpMetadata \n                activePlate={props.activePlate}\n                activePage={props.activePage}\n\n                metadata={props.metadata}\n                setMetadata={props.setMetadata}\n                \n                well_number={props.well_number}\n                setwell_number={props.setwell_number}\n                replicate_number={props.replicate_number}\n                setreplicate_number={props.setreplicate_number}\n                blank_border={props.blank_border}\n                setblank_border={props.setblank_border}\n                />}\n            {props.activePlate && props.chemicals.map((chemical, index) => {\n                return(\n                    <SetUpChemdata\n                        id={chemical.id} \n                        name={chemical.name}\n                        low_conc={chemical.low_conc}\n                        high_conc={chemical.high_conc}\n\n                        conc_list={chemical.conc_list}\n                        manualSetup={chemical.manualSetup}\n\n                        n_conditions={chemical.n_conditions}\n                        exclude_neg_control={chemical.exclude_neg_control}\n                        log_scale={chemical.log_scale}\n                        index={index+1}\n                        updateChemical={props.updateChemicalHandler}\n                        // handlePlateChange={props.handlePlateChange}\n                        deleteChemicalHandler={deleteChemicalHandler}\n                        well_number={props.well_number}\n\n                        activePlate={props.activePlate}\n\n                        // for plate setup\n                        stock_concentration={chemical.stock_concentration}\n                        source_labware={chemical.source_labware}\n\n                    />\n                );\n            }\n            )}\n            {props.activePlate &&\n\n                <Divider />\n            }\n            {props.activePlate && \n            \n            <Button onClick={addChemicalHandler} variant=\"outlined\" color=\"primary\">\n                Add Chemical\n            </Button>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default SetUp;","import React, { useState, useEffect } from 'react';\nimport { Button, TextField, MenuItem, Typography, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport APIService from '../utils/APIService';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n// const API_URL_AWS = 'http://ec2-3-145-8-106.us-east-2.compute.amazonaws.com'\nconst API_URL_AWS = ''\n\nconst plateTypes = {\n    96: [\n        {\n            value: 'plate96_1longName',\n            label: 'p96_1short',\n        },\n        {\n            value: 'plate96_2longName',\n            label: 'p96_2short',\n        }\n    ],\n\n    12: [\n        {\n            value: 'plate12_1longName',\n            label: 'p12_1short',\n        },\n        {\n            value: 'plate12_2longName',\n            label: 'p12_2short',\n        }\n    ],\n};\n\nconst pipette_options = [\n    {\n        value: 'p20_single_gen2',\n        tip_type: 'p20',\n        label: 'P20 Single GEN2 (1-20 µL)',\n    },\n    {\n        value: 'p300_single_gen2',\n        tip_type: 'p300',\n        label: 'P300 Single GEN2 (20-300 µL)',\n    },\n    {\n        value: 'p1000_single_gen2',\n        tip_type: 'p1000',\n        label: 'P1000 Single GEN2 (100-1000 µL)',\n    },\n    {\n        value: 'p300_multi_gen2',\n        tip_type: 'p300',\n        label: 'P300 Multi GEN2 (20-300 µL)',\n    },\n    {\n        value: 'p20_multi_gen2',\n        tip_type: 'p20',\n        label: 'P20 Multi GEN2 (1-20 µL)',\n    },\n    {\n        value: 'p10_single',\n        tip_type: 'p20',\n        label: 'P10 Single (1-10 µL)',\n    },\n    {\n        value: 'p10_multi',\n        tip_type: 'p20',\n        label: 'P10 Multi (1-10 µL)',\n    },\n    /*\n    {\n        value: 'p50_single',\n        label: 'P50 Single (5-50 µL)',\n    },\n    {\n        value: 'p50_multi',\n        label: 'P50 Multi (5-50 µL)',\n    },*/\n    {\n        value: 'p300_single',\n        tip_type: 'p300',\n        label: 'P300 Single (30-300 µL)',\n    },\n    {\n        value: 'p300_multi',\n        tip_type: 'p300',\n        label: 'P300 Multi (30-300 µL)',\n    },\n    {\n        value: 'p1000_single',\n        tip_type: 'p1000',\n        label: 'P1000 Single (100-1000 µL)',\n    },\n]\n\nconst tiprack_options = {\n    'p20': [\n        {\n            value: 'geb_96_tiprack_10ul',\n            label: 'GEB Tips 10 µL',\n        },\n        {\n            value: 'opentrons_96_filtertiprack_10ul',\n            label: 'OT Filtertips 10 µL',\n        },\n        {\n            value: 'opentrons_96_filtertiprack_20ul',\n            label: 'OT Filtertips 20 µL',\n        },\n        {\n            value: 'opentrons_96_tiprack_10ul',\n            label: 'OT Tips 10 µL',\n        },\n        {\n            value: 'opentrons_96_tiprack_20ul',\n            label: 'OT Tips 20 µL',\n        },\n    ],\n\n    'p300': [\n        {\n            value: 'opentrons_96_filtertiprack_200ul',\n            label: 'OT Filtertips 200 µL',\n        },\n        {\n            value: 'opentrons_96_tiprack_300ul',\n            label: 'OT Tips 300 µL',\n        }\n    ],\n\n    'p1000': [\n        {\n            value: 'geb_96_tiprack_1000ul',\n            label: 'GEB Tips 1000 µL',\n        },\n        {\n            value: 'opentrons_96_filtertiprack_1000ul',\n            label: 'OT Filtertips 1000 µL',\n        },\n        {\n            value: 'opentrons_96_tiprack_1000ul',\n            label: 'OT Tips 1000 µL',\n        },\n    ],\n    '': [\n        {\n            value: '',\n            label: 'Select Pipette first',\n        },\n\n    ],\n};\n\nconst p20type = [\n    'p20_single_gen2',\n    'p20_multi_gen2',\n    'p10_single',\n    'p10_multi',\n    'opentrons_96_tiprack_20ul',\n]\n\nconst p300type = [\n    'p300_single_gen2',\n    'p300_multi_gen2',\n    'p300_single',\n    'p300_multi',\n]\n\nconst p1000type = [\n    'p1000_single_gen2',\n    'p1000_single',\n]\n\n\nfunction PipetteTypeSelector(props) {\n    const classes = useStyles();\n    \n\n    const [plateType, setPlateType] = useState('');\n    const [well_number, setwell_number] = useState(96)\n\n    useEffect(() => {\n        if (props.pipette_left || props.pipette_right) {\n            // left pipette\n            if (p20type.includes(props.pipette_left)) {\n                props.setTipTypeLeft('p20')\n            }\n            if (p300type.includes(props.pipette_left)) {\n                props.setTipTypeLeft('p300')\n            }\n            if (p1000type.includes(props.pipette_left)) {\n                props.setTipTypeLeft('p1000')\n            }\n\n            // right pipette\n            if (p20type.includes(props.pipette_right)) {\n                props.setTipTypeRight('p20')\n            }\n            if (p300type.includes(props.pipette_right)) {\n                props.setTipTypeRight('p300')\n            }\n            if (p1000type.includes(props.pipette_right)) {\n                props.setTipTypeRight('p1000')\n            }\n        }\n    }, [props.pipette_left, props.pipette_right, props.tip_type_right, props.tip_type_left])\n\n\n\n    const handleChange_plateType = (event) => {\n        setPlateType(event.target.value);\n    };\n\n\n\n    const handleChange_well_number = (event) => {\n        setwell_number(event.target.value);\n        setPlateType('');\n\n    };\n\n    // Flask response post request test function\n    const flaskResponseTest = async () => {\n        const plateInfo = { plateType: plateType, well_number: well_number, plate_id: props.activePlate };\n        const response = await fetch(`${API_URL_AWS}/download`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(plateInfo)\n        });\n\n        if (response.ok) {\n            console.log(\"response worked!\");\n        }\n    }\n\n    \n\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            {/*select how many wells - in the future pull this from plate json*/}\n            {/*\n            <TextField\n                id=\"outlined-select-well_number\"\n                select\n                label=\"Select\"\n                value={well_number}\n                onChange={handleChange_well_number}\n                helperText=\"Please select your plate type\"\n                variant=\"outlined\"\n                required=\"true\"\n                error={!formValidate || well_number ? '' : 'true'}\n\n            >\n                {well_numbers.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                ))}\n            </TextField>\n            */}\n            <Typography variant='h6'>Pipette Setup</Typography>\n\n            <TextField\n                id=\"outlined-select-pipette_left\"\n                select\n                label=\"Left Pipette\"\n                value={props.pipette_left}\n                onChange={props.handleChange_pipetteLeft}\n                variant=\"outlined\"\n                >\n                    {pipette_options.map((option) =>\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    )}\n            </TextField>\n\n            <TextField\n                id=\"outlined-select-pipette_right\"\n                select\n                label=\"Right Pipette\"\n                value={props.pipette_right}\n                onChange={props.handleChange_pipetteRight}\n                variant=\"outlined\"\n            >\n                {pipette_options.map((option) =>\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                )}\n            </TextField>\n\n            <TextField\n                id=\"outlined-select-tips_left\"\n                select\n                label=\"Left Tips\"\n                value={props.tips_left}\n                onChange={props.handleChange_tipsLeft}\n                variant=\"outlined\"\n            >\n                    {tiprack_options[props.tip_type_left ? props.tip_type_left : ''].map((option) =>\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                )}\n            </TextField>\n\n            <TextField\n                id=\"outlined-select-tips_right\"\n                select\n                label=\"Right Tips\"\n                value={props.tips_right}\n                onChange={props.handleChange_tipsRight}\n                variant=\"outlined\"\n            >\n                    {tiprack_options[props.tip_type_right ? props.tip_type_right : ''].map((option) =>\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                )}\n            </TextField>\n\n            <Divider/>\n\n            {/*select plate type (e.g. Greiner, or Epis)*/}\n            {/*\n            <TextField\n                id=\"outlined-select-plateType\"\n                select\n                label=\"Select\"\n                value={plateType}\n                onChange={handleChange_plateType}\n                helperText=\"Please select your plate type\"\n                variant=\"outlined\"\n                required=\"true\"\n                error={!formValidate || plateType ? '' : 'true'}\n            >\n                {plateTypes[well_number].map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                ))}\n            </TextField>\n                */}\n            </form>\n\n        </React.Fragment>\n        \n    );\n}\n\nexport default PipetteTypeSelector;","import React, { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport { Button, TextField, MenuItem, Typography, Divider } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport APIService from '../utils/APIService';\n\nconst useStyles = (theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n});\n\n// source_options same as constant in DiluentInfo ! keep the same.\nconst plateTypes = {\n    96: [\n        {\n            value: 'biorad_96_wellplate_200ul_pcr',\n            label: 'Bio-Rad 96 Well PCR V-bottom (200 µL)',\n        },\n        {\n            value: 'corning_96_wellplate_360ul_flat',\n            label: 'Corning 96 Well Flat-bottom (360 µL)',\n        },\n        {\n            value: 'nest_96_wellplate_100ul_pcr_full_skirt',\n            label: 'NEST 96 Well PCR V-bottom (100 µL)',\n        },\n        {\n            value: 'nest_96_wellplate_200ul_flat',\n            label: 'NEST 96 Well Flat-bottom (200 µL)',\n        },\n        {\n            value: 'nest_96_wellplate_2ml_deep',\n            label: 'NEST 96 Deepwell V-bottom (2 mL)',\n        },\n        {\n            value: 'usascientific_96_wellplate_2.4ml_deep',\n            label: 'USA Scientific 96 Deepwell U-bottom (2.4 mL)',\n        },\n    ],\n\n    12: [\n        {\n            value: 'corning_12_wellplate_6.9ml_flat',\n            label: 'Corning 12 Well Flat-bottom (6.9 mL)',\n        }\n    ],\n\n    384: [\n        {\n            value: 'corning_384_wellplate_112ul_flat',\n            label: 'Corning 384 Well Flat-bottom (112 µL)',\n        }\n    ],\n\n    24: [\n        {\n            value: 'corning_24_wellplate_3.4ml_flat',\n            label: 'Corning 24 Well Flat-bottom (3.4 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf U-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_generic_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap Generic V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_0.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (0.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST U-bottom (2 mL)',\n        },\n    ],\n    \n    'source_options': [\n        {\n            value: 'opentrons_6_tuberack_falcon_50ml_conical',\n            label: 'OT 6 Tube Rack - 50 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_6_tuberack_nest_50ml_conical',\n            label: 'OT 6 Tube Rack - 50 mL NEST V-bottom',\n        },\n        {\n            value: 'opentrons_15_tuberack_falcon_15ml_conical',\n            label: 'OT 15 Tube Rack - 15 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_15_tuberack_nest_15ml_conical',\n            label: 'OT 15 Tube Rack - 15 mL NEST V-bottom',\n        },\n        /*\n        {\n            value: 'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 15 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 50 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 15 mL NEST V-bottom',\n        },\n        {\n            value: 'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 50 mL NEST V-bottom',\n        },\n        */\n        {\n            value: 'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf U-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_generic_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap Generic V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_0.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (0.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST U-bottom (2 mL)',\n        },\n    ],\n};\n\n\nclass InducerSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange_source_labware = this.onChange_source_labware.bind(this);\n        this.onChange_stock_concentration = this.onChange_stock_concentration.bind(this);\n\n        this.state = {\n            activePlate: \"\",\n            plateType: \"\",\n            source_labware: null,\n            stock_concentration: null,           \n        }\n    };\n\n    componentDidMount() {\n        this.setState({\n            chemName: this.props.chemName,\n            activePlate: this.props.activePlate,\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const labwareChanged = prevState.source_labware !== this.state.source_labware;\n        const stockConcChanged = prevState.stock_concentration !== this.state.stock_concentration;\n        // const idChanged = prevState.id !== this.props.id;\n        // const plateChanged = prevState.activePlate !== this.props.activePlate;\n        \n        const idChanged = this.state.id !== this.props.id;\n\n        if (idChanged) {\n            this.setState({\n                activePlate: this.props.activePlate,\n\n                id: this.props.id,\n                name: this.props.name,\n                low_conc: this.props.low_conc,\n                high_conc: this.props.high_conc,\n                n_conditions: this.props.n_conditions,\n                exclude_neg_control: this.props.exclude_neg_control,\n                log_scale: this.props.log_scale,\n\n                // LABWARE\n                source_labware: this.props.source_labware,\n                stock_concentration: this.props.stock_concentration,\n            })\n        }\n        \n        if (labwareChanged || stockConcChanged) {\n            this.props.updateChemical({\n                id: this.props.id,\n                name: this.props.name,\n                low_conc: this.props.low_conc,\n                high_conc: this.props.high_conc,\n                n_conditions: this.props.n_conditions,\n                exclude_neg_control: this.props.exclude_neg_control,\n                log_scale: this.props.log_scale,\n\n                // LABWARE\n                source_labware: this.state.source_labware,\n                stock_concentration: this.state.stock_concentration,\n            })\n        }\n    }\n\n    onChange_source_labware (e) {\n        this.setState({source_labware: e.target.value})\n    }\n    \n    onChange_stock_concentration (e) {\n        this.setState({stock_concentration: e.target.value})\n    }\n    \n    render() {\n        const {classes} = this.props;\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n\n            <Typography variant='h6'>Inducer Information: {this.props.name}</Typography>\n\n            <TextField\n                id=\"outlined-select-inducer_source_plate\"\n                select\n                label=\"Source Labware\"\n                value={this.state.source_labware}\n                // defaultValue={this.state.source_labware}\n                onChange={this.onChange_source_labware}\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n            >\n                {plateTypes['source_options'].map((option) =>\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                )}\n            </TextField>\n\n            <TextField\n                id=\"outlined-number-inducer_stock_concentration\"\n                type=\"number\"\n                label=\"Stock Concentration (uM)\"\n                value={this.state.stock_concentration}\n                // defaultValue={this.state.stock_concentration}\n                onChange={this.onChange_stock_concentration}\n                variant=\"outlined\"\n                InputLabelProps={{ shrink: true }}\n            >\n                {plateTypes['source_options'].map((option) =>\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                )}\n            </TextField>\n\n            </form>\n            <Divider />\n        </React.Fragment>\n        \n    );}\n}\n\nexport default withStyles(useStyles)(InducerSelector);","import React, { useState, useEffect } from 'react';\nimport { Button, TextField, MenuItem, Typography, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport APIService from '../utils/APIService';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nconst plateTypes = {\n    96: [\n        {\n            value: 'biorad_96_wellplate_200ul_pcr',\n            label: 'Bio-Rad 96 Well PCR V-bottom (200 µL)',\n        },\n        {\n            value: 'corning_96_wellplate_360ul_flat',\n            label: 'Corning 96 Well Flat-bottom (360 µL)',\n        },\n        {\n            value: 'nest_96_wellplate_100ul_pcr_full_skirt',\n            label: 'NEST 96 Well PCR V-bottom (100 µL)',\n        },\n        {\n            value: 'nest_96_wellplate_200ul_flat',\n            label: 'NEST 96 Well Flat-bottom (200 µL)',\n        },\n        {\n            value: 'nest_96_wellplate_2ml_deep',\n            label: 'NEST 96 Deepwell V-bottom (2 mL)',\n        },\n        {\n            value: 'usascientific_96_wellplate_2.4ml_deep',\n            label: 'USA Scientific 96 Deepwell U-bottom (2.4 mL)',\n        },\n    ],\n\n    12: [\n        {\n            value: 'corning_12_wellplate_6.9ml_flat',\n            label: 'Corning 12 Well Flat-bottom (6.9 mL)',\n        }\n    ],\n\n    384: [\n        {\n            value: 'corning_384_wellplate_112ul_flat',\n            label: 'Corning 384 Well Flat-bottom (112 µL)',\n        }\n    ],\n\n    24: [\n        {\n            value: 'corning_24_wellplate_3.4ml_flat',\n            label: 'Corning 24 Well Flat-bottom (3.4 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf U-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_generic_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap Generic V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_0.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (0.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST U-bottom (2 mL)',\n        },\n    ],\n\n    'source_options': [\n        {\n            value: 'opentrons_6_tuberack_falcon_50ml_conical',\n            label: 'OT 6 Tube Rack - 50 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_6_tuberack_nest_50ml_conical',\n            label: 'OT 6 Tube Rack - 50 mL NEST V-bottom',\n        },\n        {\n            value: 'opentrons_15_tuberack_falcon_15ml_conical',\n            label: 'OT 15 Tube Rack - 15 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_15_tuberack_nest_15ml_conical',\n            label: 'OT 15 Tube Rack - 15 mL NEST V-bottom',\n        },\n        /*\n        {\n            value: 'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 15 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 50 mL Falcon V-bottom',\n        },\n        {\n            value: 'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 15 mL NEST V-bottom',\n        },\n        {\n            value: 'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical',\n            label: 'OT 10 Tube Rack - 50 mL NEST V-bottom',\n        },\n        */\n        {\n            value: 'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap Eppendorf U-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_generic_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap Generic V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_0.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (0.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_1.5ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST V-bottom (1.5 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_screwcap',\n            label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (2 mL)',\n        },\n        {\n            value: 'opentrons_24_tuberack_nest_2ml_snapcap',\n            label: 'OT 24 Tube Rack - Snapcap NEST U-bottom (2 mL)',\n        },\n    ],\n};\n\nfunction ScriptSelector(props) {\n    const classes = useStyles();\n\n    \n    const handleChange_destinationPlate = (e) => {\n        props.setDestinationPlate(e.target.value)\n\n        const newLoadingInfo = {\n            destinationPlate: e.target.value,\n            inducerMixVolume: props.inducerMixVolume,\n            finalVolume: props.finalVolume,\n            dilutionFactor: props.dilutionFactor,\n        }\n        APIService.updateLoadingInfo({ loadingInfo: newLoadingInfo, plate_id: props.activePlate, page_id: props.activePage })\n            .then(response => console.log('ScriptSelector.js; updateLoadingInfo: ', response))\n\n    }\n    \n    const handleChange_inducerMixVolume = (e) => {\n        props.setInducerMixVolume(e.target.value)\n        const dilFactor = props.finalVolume / e.target.value;\n        props.setDilutionFactor(dilFactor)\n\n        const newLoadingInfo = {\n            destinationPlate: props.destinationPlate,\n            inducerMixVolume: e.target.value,\n            finalVolume: props.finalVolume,\n            dilutionFactor: dilFactor,\n        }\n        APIService.updateLoadingInfo({ loadingInfo: newLoadingInfo, plate_id: props.activePlate, page_id: props.activePage })\n            .then(response => console.log('ScriptSelector.js; updateLoadingInfo: ', response))\n\n    }\n\n    const handleChange_finalVolume = (e) => {\n        props.setFinalVolume(e.target.value)\n        const dilFactor = e.target.value / props.inducerMixVolume\n        props.setDilutionFactor(dilFactor)\n\n        const newLoadingInfo = {\n            destinationPlate: props.destinationPlate,\n            inducerMixVolume: props.inducerMixVolume,\n            finalVolume: e.target.value,\n            dilutionFactor: dilFactor,\n        }\n        APIService.updateLoadingInfo({ loadingInfo: newLoadingInfo, plate_id: props.activePlate, page_id: props.activePage })\n            .then(response => console.log('ScriptSelector.js; updateLoadingInfo: ', response))\n\n    }\n\n    const handleChange_dilutionFactor = (e) => {\n        props.setDilutionFactor(e.target.value)\n        const totalVol = props.inducerMixVolume * e.target.value;\n        props.setFinalVolume(totalVol)\n\n        const newLoadingInfo = {\n            destinationPlate: props.destinationPlate,\n            inducerMixVolume: props.inducerMixVolume,\n            finalVolume: totalVol,\n            dilutionFactor: e.target.value,\n        }\n        APIService.updateLoadingInfo({loadingInfo: newLoadingInfo, plate_id: props.activePlate, page_id: props.activePage})\n            .then(response => console.log('ScriptSelector.js; updateLoadingInfo: ', response))\n    }\n\n\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <Typography variant='h6'>Loading Information</Typography>\n\n                <TextField\n                    id=\"outlined-select-destinationPlate\"\n                    select\n                    label=\"Destination Plate\"\n                    value={props.destinationPlate}\n                    onChange={handleChange_destinationPlate}\n                    variant=\"outlined\"\n                >\n                    {plateTypes[props.metadata.well_number].map((option) =>\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    )}\n                </TextField>\n                \n                <TextField\n                    id=\"outlined-number-destination_inducer_volume\"\n                    type=\"number\"\n                    label=\"Inducer Mix Volume\"\n                    value={props.inducerMixVolume}\n                    onChange={handleChange_inducerMixVolume}\n                    variant=\"outlined\"\n                />\n\n                <TextField\n                    id=\"outlined-number-destination_total_volume\"\n                    type=\"number\"\n                    label=\"Final Volume (post dilution)\"\n                    value={props.finalVolume}\n                    onChange={handleChange_finalVolume}\n                    variant=\"outlined\"\n                />\n\n                <TextField\n                    id=\"outlined-number-destination_concentration_factor\"\n                    type=\"number\"\n                    label=\"Dilution factor\"\n                    value={props.dilutionFactor}\n                    onChange={handleChange_dilutionFactor}\n                    variant=\"outlined\"\n                />\n\n\n            </form>\n            <Divider/>\n        </React.Fragment>\n    )\n}\n\nexport default ScriptSelector;","import React, { useState, useEffect } from 'react';\nimport { Button, TextField, MenuItem, Typography, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport APIService from '../utils/APIService';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n// same as constant in InducerSelector ! keep the same.\nconst source_labware = [\n\n    {\n        value: 'opentrons_6_tuberack_falcon_50ml_conical',\n        label: 'OT 6 Tube Rack - 50 mL Falcon V-bottom',\n    },\n    {\n        value: 'opentrons_6_tuberack_nest_50ml_conical',\n        label: 'OT 6 Tube Rack - 50 mL NEST V-bottom',\n    },\n    {\n        value: 'opentrons_15_tuberack_falcon_15ml_conical',\n        label: 'OT 15 Tube Rack - 15 mL Falcon V-bottom',\n    },\n    {\n        value: 'opentrons_15_tuberack_nest_15ml_conical',\n        label: 'OT 15 Tube Rack - 15 mL NEST V-bottom',\n    },\n    /*\n    {\n        value: 'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n        label: 'OT 10 Tube Rack - 15 mL Falcon V-bottom',\n    },\n    {\n        value: 'opentrons_10_tuberack_falcon_4x50ml_6x15ml_conical',\n        label: 'OT 10 Tube Rack - 50 mL Falcon V-bottom',\n    },\n    {\n        value: 'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical',\n        label: 'OT 10 Tube Rack - 15 mL NEST V-bottom',\n    },\n    {\n        value: 'opentrons_10_tuberack_nest_4x50ml_6x15ml_conical',\n        label: 'OT 10 Tube Rack - 50 mL NEST V-bottom',\n    },\n    */\n    {\n        value: 'opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap',\n        label: 'OT 24 Tube Rack - Snapcap Eppendorf V-bottom (1.5 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_eppendorf_2ml_safelock_snapcap',\n        label: 'OT 24 Tube Rack - Snapcap Eppendorf U-bottom (2 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_generic_2ml_screwcap',\n        label: 'OT 24 Tube Rack - Screwcap Generic V-bottom (2 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_nest_0.5ml_screwcap',\n        label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (0.5 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_nest_1.5ml_screwcap',\n        label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (1.5 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_nest_1.5ml_snapcap',\n        label: 'OT 24 Tube Rack - Snapcap NEST V-bottom (1.5 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_nest_2ml_screwcap',\n        label: 'OT 24 Tube Rack - Screwcap NEST V-bottom (2 mL)',\n    },\n    {\n        value: 'opentrons_24_tuberack_nest_2ml_snapcap',\n        label: 'OT 24 Tube Rack - Snapcap NEST U-bottom (2 mL)',\n    },\n];\n\n\nfunction DiluentInfo(props) {\n    const classes = useStyles();\n    /*\n    const [diluentName, setDiluentName] = useState('');\n    const handleChange_diluentName = (e) => {\n        setDiluentName(e.target.value)\n    }*/\n    const handleChange_labware = (e) => {\n        props.setDiluentLabware(e.target.value)\n\n        const diluentInfo = {labware: e.target.value}\n\n        APIService.updateDiluentInfo({diluent_info: diluentInfo, plate_id: props.activePlate, page_id: props.activePage})\n        .then(response => {\n            console.log('DiluentInfo.js; updateDiluentInfo', response)\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <Typography variant='h6'>Diluent Information</Typography>\n                {/* \n                <TextField\n                    id=\"outlined-text-DiluentName\"\n                    type=\"text\"\n                    label=\"Diluent Name\"\n                    value={diluentName}\n                    onChange={handleChange_diluentName}\n                    variant=\"outlined\"\n                />\n                */}\n                <TextField\n                    id=\"outlined-select-source_labware\"\n                    select\n                    label=\"Source Labware\"\n                    value={props.diluentLabware}\n                    onChange={handleChange_labware}\n                    variant=\"outlined\"\n                >\n                    {source_labware.map((option) =>\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    )}\n                </TextField>\n                \n\n\n            </form>\n            <Divider/>\n        </React.Fragment>\n    )\n}\n\nexport default DiluentInfo;","import React, { useState, useEffect } from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\n// import axios from 'axios';\nimport PipetteTypeSelector from './AutoLoadJS/PipetteTypeSelector'\nimport InducerSelector from './AutoLoadJS/InducerSelector'\nimport APIService from './utils/APIService';\nimport ScriptSelector from './AutoLoadJS/ScriptSelector';\nimport DiluentInfo from './AutoLoadJS/DiluentInfo';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nconst API_URL_AWS = 'http://ec2-3-145-8-106.us-east-2.compute.amazonaws.com'\n// const API_URL_AWS = ''\n\n\nfunction AutoLoad(props) {\n    const classes = useStyles();\n\n    const [getMessage, setGetMessage] = useState({})\n\n\n\n    const handleChange_pipetteLeft = (e) => {\n        props.setPipetteLeft(e.target.value);\n        props.setTipTypeLeft(e.target.tip_type);\n\n        const pipetteSetup = {\n            plate_id: props.activePlate,\n            pipette_left: e.target.value,\n            tip_type_left: '',\n            pipette_right: props.pipette_right,\n            tip_type_right: props.tip_type_right,\n            tips_left: props.tips_left,\n            tips_right: props.tips_right,\n        }\n\n        APIService.update_pipette_setup(pipetteSetup)\n        .then(response => console.log(response))\n        console.log(e.target.tip_type)\n        console.log(e.target.value)\n    };\n\n    const handleChange_pipetteRight = (e) => {\n\n        const pipetteSetup = {\n            plate_id: props.activePlate,\n            pipette_left: props.pipette_left,\n            tip_type_left: props.tip_type_left,\n            pipette_right: e.target.value,\n            tip_type_right: '',\n            tips_left: props.tips_left,\n            tips_right: props.tips_right,\n        }\n\n        props.setPipetteRight(e.target.value);\n        props.setTipTypeRight(e.target.tip_type);\n    };\n\n    const handleChange_tipsLeft = (e) => {\n\n        const pipetteSetup = {\n            plate_id: props.activePlate,\n            pipette_left: props.pipette_left,\n            tip_type_left: props.tip_type_left,\n            pipette_right: props.pipette_right,\n            tip_type_right: props.tip_type_right,\n            tips_left: e.target.value,\n            tips_right: props.tips_right,\n        }\n\n        props.setTipsLeft(e.target.value)\n    }\n    const handleChange_tipsRight = (e) => {\n\n        const pipetteSetup = {\n            plate_id: props.activePlate,\n            pipette_left: props.pipette_left,\n            tip_type_left: props.tip_type_left,\n            pipette_right: props.pipette_right,\n            tip_type_right: props.tip_type_right,\n            tips_left: props.tips_left,\n            tips_right: e.target.value,\n        }\n\n        props.setTipsRight(e.target.value)\n    }\n\n    // INDUCER SETUP\n    // const [destination_plate, setDestinationPlate] = useState('')\n\n\n    const [source_labware, setSourceLabware] = useState('')\n    const [water_source_labware, setWaterSourceLabware] = useState('')\n\n    const handleChange_sourceLabware = (e) => {\n        setSourceLabware(e.target.value)\n    };\n\n    const handleChange_waterSourceLabware = (e) => {\n        setWaterSourceLabware(e.target.value)\n    };\n\n\n    // form validation\n    /*\n\n    const [formValidate, setFormValidate] = useState(false)\n    const [submitReady, setSubmitReady] = useState(false);\n\n    const onFormValidate = () => {\n        setFormValidate(true)\n    }\n\n    // ready to download ot_script?\n\n    useEffect(() => {\n        if ((plateType && well_number > 0)) {\n            setSubmitReady(true)\n        } else { setSubmitReady(false) }\n        // console.log('triggered useEffect: ')\n        // console.log(submitReady)\n    }, [props.metadata.plateType, well_number, submitReady])\n\n    */\n\n    // DOWNLOAD\n    const onDownload = () => {\n        const autoload_metadata = {\n            pipette_left: props.pipette_left,\n            pipette_right: props.pipette_right,\n            tips_left: props.tips_left,\n            tips_right: props.tips_right,\n            dest_labware: props.destinationPlate,\n            source_labware: source_labware,  // this one still needs amending / fixing. how to cope with more chemicals etc.\n            diluent_labware: props.diluentLabware,\n        }\n        const plateInfo = {\n            metadata: props.metadata,\n            chemicals: props.chemicals,\n            plate_id: props.activePlate,\n            autoload_metadata: autoload_metadata,\n        };\n        // setFormValidate(false)\n        APIService.process_template(plateInfo)\n            .then(response => {\n                console.log(response)\n                if (response.success) {\n                    console.log('success scenario')\n                    const link = document.createElement(\"a\");\n                    link.download = 'ot_script_reactname.py';  // this is not working with Flask backend atm...\n                    link.href = `${API_URL_AWS}/download`;  // changeInDeployment\n                    console.log(link.href)\n                    link.click();\n                }\n                else {\n                    console.log('failure scenario')\n                }\n            })\n            .catch(error => console.log(error))\n\n    };\n\n\n    return (\n        <React.Fragment>\n            {!props.activePlate &&\n            <Typography>Select a plate to get started.</Typography>\n            }\n\n\n            {props.activePlate &&\n            <ScriptSelector\n                // well_number={props.well_number}\n                activePlate={props.activePlate}\n                activePage={props.activePage}\n\n                metadata={props.metadata}\n                \n                // autoload metadata\n                destinationPlate={props.destinationPlate}\n                inducerMixVolume={props.inducerMixVolume}\n                finalVolume={props.finalVolume}\n                dilutionFactor={props.dilutionFactor}\n                \n                setDestinationPlate={props.setDestinationPlate}\n                setInducerMixVolume={props.setInducerMixVolume}\n                setFinalVolume={props.setFinalVolume}\n                setDilutionFactor={props.setDilutionFactor}\n\n            />\n            }\n\n            {props.activePlate &&\n            <PipetteTypeSelector\n                activePlate={props.activePlate}\n                chemicals={props.chemicals}\n                metadata={props.metadata}\n                pipette_left={props.pipette_left}\n                pipette_right={props.pipette_right}\n                tip_type_left={props.tip_type_left}\n                tip_type_right={props.tip_type_right}\n                tips_left={props.tips_left}\n                tips_right={props.tips_right}\n                handleChange_pipetteLeft={handleChange_pipetteLeft}\n                handleChange_pipetteRight={handleChange_pipetteRight}\n                handleChange_tipsLeft={handleChange_tipsLeft}\n                handleChange_tipsRight={handleChange_tipsRight}\n                well_number={props.well_number}\n                setTipTypeLeft={props.setTipTypeLeft}\n                setTipTypeRight={props.setTipTypeRight}\n            />\n            }\n\n            {props.activePlate &&\n                <DiluentInfo\n                    activePlate={props.activePlate}\n                    activePage={props.activePage}\n\n                    diluentLabware={props.diluentLabware}\n                    setDiluentLabware={props.setDiluentLabware}\n                />\n            }\n\n            {props.activePlate && props.chemicals.map((chemical, index) => {\n                return(\n                <InducerSelector\n                    id={chemical.id}\n                    index={index+1}\n                    activePlate={props.activePlate}\n                    metadata={props.metadata}\n                    source_labware={chemical.source_labware}\n                    stock_concentration={chemical.stock_concentration}\n                    //water_source_labware={water_source_labware}\n                    handleChange_sourceLabware={handleChange_sourceLabware}\n                    //handleChange_waterSourceLabware={handleChange_waterSourceLabware}\n                    well_number={props.well_number}\n\n                    // chemical props\n                    name={chemical.name}\n                    updateChemical={props.updateChemicalHandler}\n                    low_conc={chemical.low_conc}\n                    high_conc={chemical.high_conc}\n                    n_conditions={chemical.n_conditions}\n                    exclude_neg_control={chemical.exclude_neg_control}\n                    log_scale={chemical.log_scale}\n                />\n                );\n            }\n            )}\n            {props.activePlate &&\n            <Button\n                onClick={onDownload}//{submitReady ? onDownload : onFormValidate}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"medium\"\n                className={classes.button}\n                startIcon={<GetAppIcon />}\n                // sx={{m: 2}}\n            >\n                Download OT-2 Script\n            </Button>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default AutoLoad;\n","import { useState, useEffect } from 'react'\n// import './App.css';\nimport ArticleList from './testFlask_component'\n\nfunction TestFlask() {\n    const [user, setUser] = useState([]);\n\n    // Modify the current state by setting the new data to\n    // the response from the backend\n    useEffect(() => {\n        fetch('/userlist', {\n            'methods': 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => response.json())\n            .then(response => setUser(response))\n            .catch(error => console.log(error))\n\n    }, [])\n\n    return (\n        <div className=\"App container m-4\">\n            <div className=\"row\">\n                <div className=\"text-center\">\n                    <h1>Connecting a React Frontend to a Flask Backend.</h1>\n                </div>\n            </div>\n\n            <ArticleList\n                users={user}\n            />\n\n        </div>\n    );\n}\n\nexport default TestFlask;","import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n// import { DropzoneArea } from 'material-ui-dropzone';\nimport Dropzone from 'react-dropzone';\nimport { Typography } from '@material-ui/core';\n// import CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nimport APIService from '../utils/APIService';\nimport uid from '../NotionClone/utils/uid';\n\n\nconst themeInstance = {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\n// const API_URL_AWS = 'http://ec2-3-145-8-106.us-east-2.compute.amazonaws.com'\nconst API_URL_AWS = ''\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        background: '#eee',\n        border: 0,\n        fontSize: 16,\n        borderRadius: 3,\n        textAlign: 'center',\n        // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        color: 'black',\n        height: 64,\n        padding: \"20px\"\n        //marginTop: \"20px\"\n        // padding: '20px',\n    },\n    fillAll: {\n        height: \"100%\",\n        width: \"100%\",\n        //padding: \"20px\"\n        //marginTop: \"20px\",\n    },\n    marginAll: {\n        padding: \"0px\",\n        '&:hover': {\n            cursor: \"pointer\",\n        }\n    }\n}));\n\n\nfunction FileUpload(props) {\n    const classes = useStyles();\n\n    const [uploadInput, setUploadInput] = useState('');\n    const [fileName, setFileName] = useState('');\n\n\n    const onUpload = (files) => {\n        const data = new FormData();\n        data.append('file', files[0]);\n        data.append('file_name', files[0].name)\n\n        fetch(`${API_URL_AWS}/upload_data/${props.activePlate}`, {\n            method: 'POST',\n            body: data,\n        }).then((response) => {\n            console.log('reached first.then')\n            props.setUploadToken(uid());\n        })\n    }\n\n    return(\n        \n        <React.Fragment>\n            <div className={classes.root}>\n            <Dropzone onDrop={acceptedFiles => onUpload(acceptedFiles)}>\n                {({ getRootProps, getInputProps }) => (\n                        <section className={classes.fillAll}>\n                        <div {...getRootProps()} className={classes.marginAll}>\n                            <input {...getInputProps()}/>\n                            <Typography variant=\"button\">Drag and drop or click to upload your data in csv format</Typography>\n                                <div><CloudUploadIcon fontSize=\"Large\" /></div>\n                        \n                        </div>\n                        \n                    </section>\n                )}\n            </Dropzone>\n            </div>       \n        </React.Fragment>\n    );\n}\n\nexport default FileUpload;\n\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport APIService from '../utils/APIService';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        MaxWidth: '100%',\n        height: 'auto',\n        maxHeight: '400px',\n        justifyContent: 'center',\n        justifyItems: 'center',\n        display: 'block',\n        margin: 'auto',\n        \n    },\n    topPad: {\n        marginTop: \"12px\",\n        marginBottom: \"12px\"\n    }\n}));\n\n\n\nfunction GenerateHeatmap(props) {\n    const classes = useStyles();\n\n    const onClick = () => {\n        const data = {\n            well_number: props.well_number,\n            chemicals: props.chemicals,\n            plate_id: props.activePlate,\n        }\n        APIService.generate_heatmap(data)\n        .then((response) => {\n            props.setImageToken(response.token)\n        })\n        .catch(error => {\n            console.log(error)\n            console.log('probably no csv uploaded.')\n        })\n    }\n\n    const onDownload = () => {\n        var element = document.createElement(\"a\");\n        var file = new Blob(\n            [\n                `get_img/${props.activePlate}/${props.image_token}`\n            ],\n            { type: \"image/*\" }\n        );\n        element.href = URL.createObjectURL(file);\n        element.download = \"image.png\";\n        element.click();\n    }\n\n    useEffect(() => {\n        props.setImageToken('')\n        onClick();\n    }, [props.activePlate, props.windowTabChange, props.uploadToken])\n\n\n    return(\n        <React.Fragment>\n            <div className={classes.topPad}>\n                <Button\n                    onClick={onClick}\n                >\n                    Preview Heatmap\n                </Button>\n                <Button\n                    onClick={onDownload}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                >\n                    Download Heatmap\n                </Button>\n            </div>\n            {props.image_token && \n                <div>\n                    <img className={classes.root} src={`get_img/${props.activePlate}/${props.image_token}`} />\n\n                </div>\n            }\n\n        </React.Fragment>\n    )\n\n\n}\n\nexport default GenerateHeatmap;","import React, {useState} from 'react';\nimport { Typography } from '@material-ui/core';\nimport TestFlask from './TestFlask';\nimport FileUpload from './Analyse/FileUpload';\nimport GenerateHeatmap from './Analyse/GenerateHeatmap';\n\nfunction Analyse(props) {\n\n    const [uploadReady, setUploadReady] = useState(false);\n    const [uploadToken, setUploadToken] = useState('');\n    const [image_token, setImageToken] = useState('');\n\n\n    return (\n        <React.Fragment>\n            {!props.activePlate &&\n                <Typography>Select a plate to get started.</Typography>\n            }\n            <FileUpload\n                uploadReady={uploadReady}\n                setUploadReady={setUploadReady}\n                activePlate={props.activePlate}\n\n                uploadToken={uploadToken}\n                setUploadToken={setUploadToken}\n            />\n\n            <GenerateHeatmap\n                activePlate={props.activePlate}\n                chemicals={props.chemicals}\n                well_number={props.well_number}\n\n                image_token={image_token}\n                setImageToken={setImageToken}\n\n                windowTabChange={props.windowTabChange}\n                uploadToken={uploadToken}\n\n\n            />\n        </React.Fragment>\n    );\n}\n// can use Flask API to push seaborn byte object exports / plots from python (check medium post)\n\nexport default Analyse;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { Typography, Tab, Tabs, AppBar, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n// import components\nimport SetUp from './SetUp';\nimport AutoLoad from './AutoLoad';\nimport Analyse from './Analyse';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nfunction Inspector(props) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        props.handlePlateChange(props.activePlate);\n        setValue(newValue);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} centered>\n                    <Tab label=\"Set Up\" {...a11yProps(0)} />\n                    <Tab label=\"AutoLoad\" {...a11yProps(1)} />\n                    <Tab label=\"Analyse\" {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n            \n            <TabPanel value={value} index={0}>\n                <SetUp\n                    activePlate={props.activePlate}\n                    activePage={props.activePage}\n                    \n                    setChemicals={props.setChemicals}\n                    chemicals={props.chemicals}\n                    updateChemicalHandler={props.updateChemicalHandler}\n                    metadata={props.metadata}\n                    setMetadata={props.setMetadata}\n                    well_number={props.well_number}\n                    setwell_number={props.setwell_number}\n                    replicate_number={props.replicate_number}\n                    setreplicate_number={props.setreplicate_number}\n                    blank_border={props.blank_border}\n                    setblank_border={props.setblank_border}\n\n                    // handlePlateChange={props.handlePlateChange}\n\n                />\n            </TabPanel>\n\n            <TabPanel value={value} index={1}>\n                <AutoLoad\n                    activePlate={props.activePlate}\n                    activePage={props.activePage}\n\n                    chemicals={props.chemicals}\n                    setChemicals={props.setChemicals}\n                    updateChemicalHandler={props.updateChemicalHandler}\n                    metadata={props.metadata}\n                    well_number={props.well_number}\n\n                    // ==================\n                    // AUTOLOAD CONSTANTS\n                    // ==================\n\n                    // autoload metadata\n                    destinationPlate={props.destinationPlate}\n                    inducerMixVolume={props.inducerMixVolume}\n                    finalVolume={props.finalVolume}\n                    dilutionFactor={props.dilutionFactor}\n\n                    setInducerMixVolume={props.setInducerMixVolume}\n                    setDestinationPlate={props.setDestinationPlate}\n                    setFinalVolume={props.setFinalVolume}\n                    setDilutionFactor={props.setDilutionFactor}\n\n                    // pipette setup\n                    pipette_left={props.pipette_left}\n                    pipette_right={props.pipette_right}\n                    tip_type_left={props.tip_type_left}\n                    tip_type_right={props.tip_type_right}\n                    tips_left={props.tips_left}\n                    tips_right={props.tips_right}\n                    \n                    setPipetteLeft={props.setPipetteLeft}\n                    setPipetteRight={props.setPipetteRight}\n                    setTipTypeLeft={props.setTipTypeLeft}\n                    setTipTypeRight={props.setTipTypeRight}\n                    setTipsLeft={props.setTipsLeft}\n                    setTipsRight={props.setTipsRight}\n\n                    // diluent metadata\n                    diluentLabware={props.diluentLabware}\n                    setDiluentLabware={props.setDiluentLabware}\n\n                />\n            </TabPanel>\n\n            <TabPanel value={value} index={2}>\n                {!props.activePlate &&\n                    <Typography>Select a plate to get started.</Typography>\n                }\n\n                {props.activePlate && \n                <Analyse\n                    activePlate={props.activePlate}\n\n                    chemicals={props.chemicals}\n                    well_number={props.well_number}\n\n                    windowTabChange={value}\n                />\n                }\n            </TabPanel>\n        </div>\n    );\n}\n\nexport default Inspector;","import React from \"react\";\nimport { matchSorter } from \"match-sorter\";\n\nconst MENU_HEIGHT = 150;\nconst allowedTags = [\n    {\n        id: \"page-title\",\n        tag: \"h1\",\n        label: \"Page Title\",\n        isPlate: false\n    },\n    {\n        id: \"heading\",\n        tag: \"h2\",\n        label: \"Heading\",\n        isPlate: false\n    },\n    {\n        id: \"subheading\",\n        tag: \"h3\",\n        label: \"Subheading\",\n        isPlate: false\n    },\n    {\n        id: \"paragraph\",\n        tag: \"p\",\n        label: \"Paragraph\",\n        isPlate: false\n    },\n    {\n        id: \"plate-obj\",\n        tag: \"\",\n        label: \"Insert Plate\",\n        isPlate: true\n    }\n];\n\nclass SelectMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.keyDownHandler = this.keyDownHandler.bind(this);\n        this.state = {\n            command: \"\",\n            items: allowedTags,\n            selectedItem: 0\n        };\n    }\n\n    // Attach a key listener to add any given key to the command\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.keyDownHandler);\n    }\n\n    // Whenever the command changes, look for matching tags in the list\n    componentDidUpdate(prevProps, prevState) {\n        const command = this.state.command;\n        if (prevState.command !== command) {\n            const items = matchSorter(allowedTags, command, { keys: [\"tag\"] });\n            this.setState({ items: items });\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.keyDownHandler);\n    }\n\n    keyDownHandler(e) {\n        const items = this.state.items;\n        const selected = this.state.selectedItem;\n        const command = this.state.command;\n\n        switch (e.key) {\n            case \"Enter\":\n                e.preventDefault();\n                this.props.onSelect(\n                    items[selected].tag,\n                    items[selected].isPlate\n                    );\n                break;\n            case \"Backspace\":\n                if (!command) this.props.close();\n                this.setState({ command: command.substring(0, command.length - 1) });\n                break;\n            case \"ArrowUp\":\n                e.preventDefault();\n                const prevSelected = selected === 0 ? items.length - 1 : selected - 1;\n                this.setState({ selectedItem: prevSelected });\n                break;\n            case \"ArrowDown\":\n            case \"Tab\":\n                e.preventDefault();\n                const nextSelected = selected === items.length - 1 ? 0 : selected + 1;\n                this.setState({ selectedItem: nextSelected });\n                break;\n            default:\n                this.setState({ command: this.state.command + e.key });\n                break;\n        }\n    }\n\n\n\n    render() {\n        // Define the absolute position before rendering\n        const x = this.props.position.x;\n        const y = this.props.position.y - MENU_HEIGHT;\n        const positionAttributes = { top: y, left: x };\n\n        return (\n            <div className=\"SelectMenu\" style={positionAttributes}>\n                <div className=\"Items\">\n                    {this.state.items.map((item, key) => {\n                        const selectedItem = this.state.selectedItem;\n                        const isSelected = this.state.items.indexOf(item) === selectedItem;\n                        return (\n                            <div\n                                className={isSelected ? \"Selected\" : null}\n                                key={key}\n                                role=\"button\"\n                                tabIndex=\"0\"\n                                onClick={() => this.props.onSelect(item.tag)}\n                            >\n                                {item.label}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SelectMenu;\n","import React, { useState } from 'react';\nimport { Typography, Button, MenuItem, MenuList, ListItemText, ListItemIcon, Paper } from '@material-ui/core';\n\nconst MENU_HEIGHT = 150;\nconst allowedTags = [\n    {\n        id: \"page-title\",\n        tag: \"h1\",\n        label: \"Page Title\",\n        isPlate: false\n    },\n    {\n        id: \"heading\",\n        tag: \"h2\",\n        label: \"Heading\",\n        isPlate: false\n    },\n    {\n        id: \"subheading\",\n        tag: \"h3\",\n        label: \"Subheading\",\n        isPlate: false\n    },\n    {\n        id: \"paragraph\",\n        tag: \"p\",\n        label: \"Paragraph\",\n        isPlate: false\n    },\n    {\n        id: \"plate-obj\",\n        tag: \"\",\n        label: \"Insert Plate\",\n        isPlate: true\n    }\n];\n\nclass plateOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.keyDownHandler = this.keyDownHandler.bind(this);\n        this.state = {\n            command: \"\",\n            items: allowedTags,\n            selectedItem: 0\n        };\n    }\n\n\n\n\n    render() {\n        // Define the absolute position before rendering\n        const x = this.props.position.x;\n        const y = this.props.position.y - MENU_HEIGHT;\n        const positionAttributes = { top: y, left: x };\n\n        return (\n            <div className=\"SelectMenu\" style={positionAttributes}>\n                <div className=\"Items\">\n                    {this.state.items.map((item, key) => {\n                        const selectedItem = this.state.selectedItem;\n                        const isSelected = this.state.items.indexOf(item) === selectedItem;\n                        return (\n                            <div\n                                className={isSelected ? \"Selected\" : null}\n                                key={key}\n                                role=\"button\"\n                                tabIndex=\"0\"\n                                onClick={() => this.props.onSelect(item.tag)}\n                            >\n                                {item.label}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default plateOptions;","import React, { useState } from 'react';\nimport { Typography, Button } from '@material-ui/core';\nimport plateOptions from './plateOptions'\nimport APIService from '../utils/APIService';\n\n\n/* const [activePlate, setActivePlate] = useState('primary') */\n\n\nclass PlateObject extends React.Component {\n    constructor(props) {\n        super(props);\n        /*\n        this.openPlateMenuHandler = this.openPlateMenuHandler.bind(this);\n        this.closePlateMenuHandler = this.closePlateMenuHandler.bind(this);\n        */\n        this.onSelectHandler = this.onSelectHandler.bind(this);\n        // for menu handling\n        this.closePlateOptions = this.closePlateOptions.bind(this);\n        this.openPlateOptions = this.openPlateOptions.bind(this);\n        this.onDeleteHandler = this.onDeleteHandler.bind(this);\n\n        this.state = {\n            isPlate: true,\n            plateMenuIsOpen: false,\n            // plateMenuPosition: null,\n            isActivePlate: false,\n            selectColor: \"primary\",\n        };\n    }\n\n    openPlateOptions() {\n        console.log(`open plate options for ${this.props.id} triggered in plateObject.js`)\n        this.setState({plateMenuIsOpen: true});\n        this.props.setActivePlate(false)\n        document.addEventListener(\"click\", this.closePlateOptions);\n    }\n\n    onDeleteHandler() {\n        console.log(`plateObject.js; delete plate ${this.props.id}`)\n        this.props.handlePlateChange(false)\n        this.props.deletePlate(this.props.id)\n        //APIService.deletePlate({plate_id: this.props.id})\n    }\n\n    closePlateOptions() {\n        this.setState({plateMenuIsOpen: false});\n        document.removeEventListener(\"click\", this.closePlateOptions);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const htmlChanged = prevState.html !== this.state.html;\n        const tagChanged = prevState.tag !== this.state.tag;\n        const isPlateChanged = prevState.isPlate !== this.state.isPlate;\n\n        const activePlateChanged = prevProps.activePlate !== this.props.activePlate;\n\n        // const plateMenuChanged = prevState.plateMenuIsOpen !== this.state.plateMenuIsOpen;\n\n        if (htmlChanged || tagChanged || isPlateChanged || activePlateChanged) {\n            this.props.updateBlock({\n                id: this.props.id,\n                html: this.state.html,\n                tag: this.state.tag,\n                isPlate: this.state.isPlate\n                // plateMenuIsOpen: this.state.plateMenuIsOpen\n            });\n            this.props.activePlate === this.props.id ? this.setState({ selectColor: \"secondary\" }) : this.setState({ selectColor: \"primary\" }) \n\n            // console.log('triggered update function')\n        }\n    }\n\n\n    onSelectHandler() {\n        console.log('triggered onSelectHandler <plateObject/>')\n        this.setState({ isActivePlate: true })\n        this.props.handlePlateChange(this.props.id)\n        //this.state.isActivePlate ? this.setState({ selectColor: \"secondary\" }) : this.setState({ selectColor: \"primary\" }) \n    }\n    /*\n    handleChange_activePlate() {\n        if (activePlate === 'primary') {\n            setActivePlate('secondary')\n        } else {\n            setActivePlate('primary')\n        }\n    }\n    */\n    render() {\n        return (\n            <React.Fragment>\n                <Button\n                    onClick={this.onSelectHandler}\n                    variant='contained'\n                    /*color={activePlate}*/\n                    color={this.state.selectColor}\n                    size='medium'\n                >\n                    Plate placeholder\n                </Button>\n\n \n                <Button\n                    id='plateOption-button'\n                    variant='contained'\n                    color='transparent'\n                    size='small'\n                    aria-controls=\"plateOptions\"\n                    aria-haspopup=\"true\"\n                    aria-expanded={this.state.plateMenuIsOpen ? 'true' : undefined}\n                    onClick={this.openPlateOptions}\n                >\n                    Plate options\n            </Button>\n\n                {this.state.selectColor === 'secondary' &&\n                    <Button\n                        onClick={this.onDeleteHandler}\n                        //variant='contained'\n                        /*color={activePlate}*/\n                        color='secondary'\n                        size='medium'\n                    >\n                        Delete Plate\n                    </Button>\n                }\n\n            <plateOptions\n                open={this.state.plateMenuIsOpen}\n                onClose={this.closePlateOptions}\n                anchorEl={this.state.plateMenuPosition}\n                MenuListProps={{\n                    'aria-labelledby': 'plateOption-button'\n                }}\n            />\n            \n            </React.Fragment>\n        );\n    }\n}\n\n\n/*\nfunction PlateObject(props) {\n\n    const [activePlate, setActivePlate] = useState('primary')\n\n    const handleChange_activePlate = () => {\n        if (activePlate === 'primary') {\n            setActivePlate('secondary')\n        } else {\n            setActivePlate('primary')\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <Button\n                onClick={handleChange_activePlate}\n                variant='contained'\n                color={activePlate}\n                size='medium'\n            >\n                Plate placeholder\n            </Button>\n            <Button\n                variant='contained'\n                color='transparent'\n                size='small'\n            >\n                Plate options\n            </Button>\n        </React.Fragment>\n    );\n}\n*/\nexport default PlateObject;","export const getCaretCoordinates = () => {\n    let x, y;\n    const isSupported = typeof window.getSelection !== \"undefined\";\n    if (isSupported) {\n        const selection = window.getSelection();\n        // Check if there is a selection (i.e. cursor in place)\n        if (selection.rangeCount !== 0) {\n            // Clone the range\n            const range = selection.getRangeAt(0).cloneRange();\n            // Collapse the range to the start, so there are not multiple chars selected\n            range.collapse(false);\n            // getCientRects returns all the positioning information we need\n            const rect = range.getClientRects()[0];\n            if (rect) {\n                x = rect.left;\n                y = rect.top;\n            }\n        }\n    }\n    return { x, y };\n};\n\nexport const setCaretToEnd = (element) => {\n    // Create a new range\n    const range = document.createRange();\n    // Get the selection object\n    const selection = window.getSelection();\n    // Select all the content from the contenteditable element\n    range.selectNodeContents(element);\n    // Collapse it to the end, i.e. putting the cursor to the end\n    range.collapse(false);\n    // Clear all existing selections\n    selection.removeAllRanges();\n    // Put the new range in place\n    selection.addRange(range);\n    // Set the focus to the contenteditable element\n    element.focus();\n};\n","import React from \"react\";\nimport ContentEditable from \"react-contenteditable\";\n\nimport \"./styles.css\";\nimport SelectMenu from \"./selectMenu\";\n\nimport PlateObject from './plateObject';\n\nimport { getCaretCoordinates, setCaretToEnd } from \"./utils/caretHelpers\";\n\n\nconst CMD_KEY = \"\\\\\";\n\nclass EditableBlock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onKeyDownHandler = this.onKeyDownHandler.bind(this);\n        this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n        this.openSelectMenuHandler = this.openSelectMenuHandler.bind(this);\n        this.closeSelectMenuHandler = this.closeSelectMenuHandler.bind(this);\n        this.tagSelectionHandler = this.tagSelectionHandler.bind(this);\n        this.contentEditable = React.createRef();\n\n        // this.handleFocus = this.handleFocus.bind(this);\n\n        this.state = {\n            htmlBackup: null, // needed to store the html temporarely\n            html: \"\",\n            tag: \"p\",\n            isPlate: false,\n            previousKey: \"\",\n            selectMenuIsOpen: false,\n            selectMenuPosition: {\n                x: null,\n                y: null\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ html: this.props.html, tag: this.props.tag, isPlate: this.props.isPlate });\n    }\n\n    // Update the page component if one of the following is true:\n    // 1. user has changed the html content\n    // 2. user has changed the tag\n    componentDidUpdate(prevProps, prevState) {\n        const htmlChanged = prevState.html !== this.state.html;\n        const tagChanged = prevState.tag !== this.state.tag;\n        const isPlateChanged = prevState.isPlate !== this.state.isPlate;\n        \n        if (htmlChanged || tagChanged || isPlateChanged) {\n            this.props.updateBlock({\n                id: this.props.id,\n                html: this.state.html,\n                tag: this.state.tag,\n                isPlate: this.state.isPlate\n            });\n        }\n    }\n\n    onChangeHandler(e) {\n        this.setState({ html: e.target.value });\n        // console.log(this.props.id)\n    }\n\n    onKeyDownHandler(e) {\n        if (e.key === CMD_KEY) {\n            // If the user starts to enter a command, we store a backup copy of\n            // the html. We need this to restore a clean version of the content\n            // after the content type selection was finished.\n            this.setState({ htmlBackup: this.state.html });\n        }\n        if (e.key === \"Enter\") {\n            // While pressing \"Enter\" should add a new block to the page, we\n            // still want to allow line breaks by pressing \"Shift-Enter\"\n            if (this.state.previousKey !== \"Shift\" && !this.state.selectMenuIsOpen) {\n                e.preventDefault();\n                this.props.addBlock({\n                    id: this.props.id,\n                    ref: this.contentEditable.current\n                });\n            }\n        }\n        if (e.key === \"Backspace\" && !this.state.html) {\n            // If there is no content, we delete the block by pressing \"Backspace\",\n            // just as we would remove a line in a regular text container\n            e.preventDefault();\n            this.props.deleteBlock({\n                id: this.props.id,\n                ref: this.contentEditable.current\n            });\n        }\n        // Store the key to detect combinations like \"Shift-Enter\" later on\n        this.setState({ previousKey: e.key });\n    }\n\n    // The openSelectMenuHandler function needs to be invoked on key up. Otherwise\n    // the calculation of the caret coordinates does not work properly.\n    onKeyUpHandler(e) {\n        if (e.key === CMD_KEY) {\n            this.openSelectMenuHandler();\n        }\n    }\n\n    // After openening the select menu, we attach a click listener to the dom that\n    // closes the menu after the next click - regardless of outside or inside menu.\n    openSelectMenuHandler() {\n        const { x, y } = getCaretCoordinates();\n        this.setState({\n            selectMenuIsOpen: true,\n            selectMenuPosition: { x, y }\n        });\n        document.addEventListener(\"click\", this.closeSelectMenuHandler);\n    }\n\n    closeSelectMenuHandler() {\n        this.setState({\n            htmlBackup: null,\n            selectMenuIsOpen: false,\n            selectMenuPosition: { x: null, y: null }\n        });\n        document.removeEventListener(\"click\", this.closeSelectMenuHandler);\n    }\n\n    // Restore the clean html (without the command), focus the editable\n    // with the caret being set to the end, close the select menu\n    tagSelectionHandler(tag, isPlate) {\n        if (isPlate) {\n            this.props.addBlock({\n                id: this.props.id,\n                ref: this.contentEditable.current\n            });\n            this.setState({ tag: tag, html: this.state.htmlBackup, isPlate: isPlate }, () => {\n                console.log('triggered plate adding');\n                //setCaretToEnd(this.contentEditable.current);\n                this.closeSelectMenuHandler();\n            });\n\n\n        } else {\n            this.setState({ tag: tag, html: this.state.htmlBackup, isPlate: isPlate }, () => {\n                setCaretToEnd(this.contentEditable.current);\n                this.closeSelectMenuHandler();\n            });\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.selectMenuIsOpen && (\n                    <SelectMenu\n                        position={this.state.selectMenuPosition}\n                        onSelect={this.tagSelectionHandler}\n                        close={this.closeSelectMenuHandler}\n                    />\n                )}\n                <ContentEditable\n                    className=\"Block\"\n                    innerRef={this.contentEditable}\n                    html={this.state.html}\n                    tagName={this.state.tag}\n                    onChange={this.onChangeHandler}\n                    onKeyDown={this.onKeyDownHandler}\n                    onKeyUp={this.onKeyUpHandler}\n                    data-position={this.props.position}\n                />\n            </>\n        );\n    }\n}\n\nexport default EditableBlock;\n","import { useEffect, useRef } from \"react\";\n\nconst usePrevious = (value) => {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nexport default usePrevious;","import React, { useEffect, useState } from \"react\";\n\nimport \"./styles.css\";\nimport EditableBlock from \"./editableBlock\";\nimport PlateObject from \"./plateObject\";\n\nimport usePrevious from './utils/usePrevious';\n\nimport uid from \"./utils/uid\";\nimport { setCaretToEnd } from \"./utils/caretHelpers\";\nimport ContentEditable from \"react-contenteditable\";\n\nimport APIService from '../utils/APIService';\n\nconst initialBlock = { id: uid(), html: \"\", tag: \"p\", isPlate: false };\n\n// A page is represented by an array containing several blocks\nconst placeholder_blocks = [\n  {\n    id: \"5f54d75b114c6d176d7e9765\",\n    html: \"Heading\",\n    tag: \"h1\",\n    isPlate: false,\n  },\n  {\n    id: \"5f54d75b114c6d176d7e9766\",\n    html: \"I am a <strong>paragraph</strong>\",\n    tag: \"p\",\n    isPlate: true,\n  },\n  {\n    id: \"5f54d75b114c6d176d7e9767\",\n    html: \"\",\n    tag: \"p\",\n    isPlate: false,\n  }\n]\n\n/*\nclass EditablePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updatePageHandler = this.updatePageHandler.bind(this);\n        this.addBlockHandler = this.addBlockHandler.bind(this);\n        this.deleteBlockHandler = this.deleteBlockHandler.bind(this);\n        this.onSelectHandler = this.onSelectHandler.bind(this);       \n        this.initialisePage = this.initialisePage.bind(this);\n        this.initial_blocks = props.blocks;\n        this.state = { blocks: props.blocks};\n    }\n    */\nconst EditablePage = (props) => {\n    const [blocks, setBlocks] = useState([ initialBlock ])\n    const [currentBlockId, setCurrentBlockId] = useState(null)\n    \n    const prevBlocks = usePrevious(blocks);\n    // update blocks if props.blocks changes\n    useEffect(() => {\n        if (props.blocks.length > 0) {\n        setBlocks(props.blocks)\n        }\n        else {\n            setBlocks( [initialBlock ])\n        }\n    }, [props.blocks]);\n    \n    // update database when blocks change\n    useEffect(() => {\n        if (prevBlocks && prevBlocks !== blocks && props.isLoggedIn) {\n            if (!blocks) {\n                setBlocks([initialBlock])\n            } \n            APIService.PostBlocks({blocks: blocks, page_id: props.activePage});\n        }\n    }, [blocks, prevBlocks, props.activePage])\n\n    // Handling the cursor and focus on adding and deleting blocks\n    useEffect(() => {\n        // If a new block was added, move the caret to it\n        if (prevBlocks && prevBlocks.length + 1 === blocks.length) {\n            // console.log('useEffect block added')\n            const nextBlockPosition =\n                blocks.map((b) => b.id).indexOf(currentBlockId) + 1 + 1;\n            // const nextBlockId = blocks[nextBlockPosition].id;\n            const nextBlock = document.querySelector(\n                `[data-position=\"${nextBlockPosition}\"]`\n            );\n            // const nextBlock2 = document.querySelector(`#\"${nextBlockPosition}\"`)\n            // console.log(nextBlockPosition)\n            // console.log(nextBlock)\n            // console.log(nextBlockId)\n            if (nextBlock) {\n                nextBlock.focus();\n            }\n        }\n        // If a block was deleted, move the caret to the end of the last block\n        if (prevBlocks && prevBlocks.length - 1 === blocks.length) {\n            const lastBlockPosition = prevBlocks\n                .map((b) => b.id)\n                .indexOf(currentBlockId);\n            const lastBlock = document.querySelector(\n                `[data-position=\"${lastBlockPosition}\"]`\n            );\n            if (lastBlock) {\n                setCaretToEnd(lastBlock);\n            }\n        }\n    }, [blocks, prevBlocks, currentBlockId]);\n\n\n    const updateBlockHandler = (currentBlock) => {\n        const index = blocks.map((b) => b.id).indexOf(currentBlock.id);\n        const oldBlock = blocks[index];\n        const updatedBlocks = [...blocks];\n        updatedBlocks[index] = {\n            ...updatedBlocks[index],\n            tag: currentBlock.tag,\n            html: currentBlock.html,\n            isPlate: currentBlock.isPlate,\n            selectColor: currentBlock.id === props.activeBlock ? \"secondary\" : \"primary\",\n        };\n        setBlocks(updatedBlocks);\n        /*\n        blocks.map((block, key) => {\n            APIService.PostBlocks(block)\n        })*/\n        // APIService.PostBlocks(block)\n\n    }\n\n    const addBlockHandler = (currentBlock) => {\n        setCurrentBlockId(currentBlock.id);\n        const index = blocks.map((b) => b.id).indexOf(currentBlock.id);\n        const updatedBlocks = [...blocks];\n\n        const newBlock = { id: uid(), html: \"\", tag: \"p\", isPlate: false };\n        updatedBlocks.splice(index + 1, 0, newBlock);\n        updatedBlocks[index] = {\n            ...updatedBlocks[index],\n            tag: currentBlock.tag,\n            html: currentBlock.html,\n            isPlate: currentBlock.isPlate,\n        };\n        setBlocks(updatedBlocks);\n        \n    };\n\n    const deleteBlockHandler = (currentBlock) => {\n        if (blocks.length > 1) {\n            // console.log(currentBlock.id)\n            // APIService.PostDeleteBlock({ id: currentBlock.id })\n            setCurrentBlockId(currentBlock.id);\n            const index = blocks.map((b) => b.id).indexOf(currentBlock.id);\n            // const deletedBlock = blocks[index];\n            const updatedBlocks = [...blocks];\n            updatedBlocks.splice(index, 1);\n            setBlocks(updatedBlocks);\n        }\n    };\n\n    const deletePlateHandler = (plate_id) => {\n        if (blocks.length > 1) {\n\n            console.log('EditablePage.js; deletePlateHandler, plate_id: ', plate_id)\n            // APIService.PostDeleteBlock({ id: currentBlock.id })\n            // setCurrentBlockId(plate_id);\n            const index = blocks.map((b) => b.id).indexOf(plate_id);\n            // const deletedBlock = blocks[index];\n            const updatedBlocks = [...blocks];\n            updatedBlocks.splice(index, 1);\n            setBlocks(updatedBlocks);\n            APIService.deletePlate({plate_id})\n        }\n    };\n\n    /* PLATE SPECIFIC FUNCTIONS GO HERE */\n    const onSelectHandler = (currentBlock) => {\n        const index = blocks.map((b) => b.id).indexOf(currentBlock.id);\n        \n        const updatedBlocks = [...blocks];\n        updatedBlocks[index] = {\n            ...updatedBlocks[index],\n            tag: currentBlock.tag,\n            html: currentBlock.html,\n            isPlate: currentBlock.isPlate,\n            isActivePlate: !currentBlock.isActivePlate\n        };\n        // console.log(updatedBlocks[index])\n        setBlocks(updatedBlocks)\n    }\n\n\n    return (\n        <React.Fragment>\n\n        <div className=\"Page\">\n            {blocks.map((block) => {\n                const position =\n                    blocks.map((b) => b.id).indexOf(block.id) + 1; \n                if (block.isPlate) {\n                // console.log(\"plate...\"); \n                return(\n                    <>\n                    <PlateObject \n                        id={block.id}\n                        isPlate={block.isPlate}\n                        deleteBlock={deleteBlockHandler}\n                        deletePlate={deletePlateHandler}\n                        // selectPlate={onSelectHandler}\n                        updateBlock={updateBlockHandler}\n                        activePlate={props.activePlate}\n                        // setActivePlate={props.setActivePlate}\n                        updateActivePlate={props.updateActivePlate}\n                        handlePlateChange={props.handlePlateChange}\n                        \n                        setActivePlate={props.setActivePlate}\n\n                    />\n                    </>\n                );\n                }\n                else {\n                return (\n                    <EditableBlock\n                        key={block.id}\n                        id={block.id}\n                        tag={block.tag}\n                        html={block.html}\n                        isPlate={block.isPlate}\n                        updateBlock={updateBlockHandler}\n                        addBlock={addBlockHandler}\n                        deleteBlock={deleteBlockHandler}\n                        position={position}\n                    />\n                );\n                }\n            })}\n        </div>\n        </React.Fragment>\n    );\n};\n\nexport default EditablePage;\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\n// import  { Typography } from '@material-ui/core';\nimport EditablePage from './NotionClone/EditablePage';\nimport APIService from './utils/APIService';\n\nfunction Notes(props) {\n\n    const handleChange_activePage_name = (e) => {\n        props.setActivePage_name(e.target.value)\n        APIService.updatePageName({page_id: props.activePage, page_name: e.target.value})\n        .then(response => {\n            props.handleSetPages(response.pages)\n        });\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"PageMenu\">\n                <TextField\n                    id=\"page_name\"\n                    label=\"Page Name\"\n                    value={props.activePage_name}\n                    onChange={handleChange_activePage_name}\n                //value={props.destination_plate}\n                //onChange={props.handleChange_destinationPlate}\n                //variant=\"outlined\"\n                />\n\n            </div>\n            <div>\n                {/*<Typography variant='h1'>This will be the notes app</Typography>*/}\n\n                <EditablePage\n                    activePlate={props.activePlate}\n                    setActivePlate={props.setActivePlate}\n                    updateActivePlate={props.updateActivePlate}\n                    blocks={props.blocks}\n                    handleSetBlocks={props.handleSetBlocks}\n                    isLoggedIn={props.isLoggedIn}\n                    handlePlateChange={props.handlePlateChange}\n\n                    activePage={props.activePage}\n\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Notes;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {Switch, FormControlLabel} from '@material-ui/core';\nimport APIService from './utils/APIService';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n\n\nfunction ButtonAppBar(props) {\n    const classes = useStyles();\n    \n    const handleLogout = () => {\n        APIService.logout()\n            .then(response => {\n                props.setCurrentUsername(response.username)\n                props.setIsLoggedIn(response.logged_in)\n                props.handleSetBlocks([''])\n                props.setActivePlate('')\n            })\n    }\n\n    const handleSideBarOpen = () => {\n        props.setSideBarOpen(!props.sideBarOpen)\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={handleSideBarOpen}>\n                        <MenuIcon />\n                    </IconButton>\n                   \n                    {props.isLoggedIn ?\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Notes of {props.currentUsername}\n                        </Typography>\n                        :\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Log in to use the app\n                        </Typography>\n                    }\n                    \n                    {/*\n                    <Button color=\"inherit\">Save</Button>\n                    \n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={props.darkMode}\n                                onChange={props.changeMode}\n                                name=\"darkMode\"\n                                color=\"secondary\"\n                            />\n                        }\n                        label={props.darkMode ? \"Dark Mode On\" : \"Dark Mode Off\"}\n                    \n                    />*/}\n                    {!props.isLoggedIn && (\n                        <Button color=\"inherit\" onClick={props.handleClickOpenSignUp}>Sign Up</Button>\n                    )}\n                    {!props.isLoggedIn && (\n                        <Button color=\"inherit\" onClick={props.handleClickOpen} variant=\"outlined\">Login</Button>\n                    )}\n                    {props.isLoggedIn && (\n                        <Button color=\"inherit\" onClick={handleLogout} variant=\"outlined\">Logout</Button>\n                    )}\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\n\nexport default ButtonAppBar;","import React, { useState, useEffect } from 'react';\nimport { Button, TextField, Dialog, DialogActions, DialogTitle, DialogContent, DialogContentText, Checkbox, FormControlLabel } from '@material-ui/core';\nimport APIService from './utils/APIService';\n\nfunction LoginPage(props) {\n\n    const [loginEmail, setLoginEmail] = useState('')\n    const [loginPassword, setLoginPassword] = useState('')\n    const [loginRemember, setLoginRemember] = useState(false)\n\n    const onLoginRequest = () => {\n        // console.log('LOGIN POST REQUEST HERE')\n        APIService.PostLogin({ loginEmail, loginPassword, loginRemember })\n            .then(response => {\n                props.setCurrentUsername(response.username)\n                props.setIsLoggedIn(response.logged_in)\n                props.handleSetBlocks(response.blocks)\n\n                props.handleSetPages(response.pages)\n                props.updateActivePage(response.page_id)\n                console.log(response)\n            })\n            .catch(error => {\n                console.log('loginError')\n                console.log(error)})\n\n        setLoginRemember(false)\n        setLoginPassword('')\n        setLoginEmail('')\n        props.handleClose();\n    };\n\n\n\n\n    const handleChange_loginEmail = (e) => {\n        setLoginEmail(e.target.value)\n    }\n\n    const handleChange_loginPassword = (e) => {\n        setLoginPassword(e.target.value)\n    }\n\n    const handleChange_loginRemember = (e) => {\n        setLoginRemember(e.target.checked)\n    }\n\n    const handleClose = () => {\n        setLoginRemember(false)\n        props.handleClose()\n    }\n\n\n    return (\n        <React.Fragment>\n            <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Login</DialogTitle>\n                <DialogContent>\n                    {/*\n                    <DialogContentText>\n                        To subscribe to this website, please enter your email address here. We will send updates\n                        occasionally.\n                    </DialogContentText>\n                    */}\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Email Address\"\n                        type=\"email\"\n                        fullWidth\n                        onChange={handleChange_loginEmail}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        fullWidth\n                        onChange={handleChange_loginPassword}\n                    />\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                onChange={handleChange_loginRemember}\n                                checked={loginRemember}\n                            />\n                        }\n                        label=\"Remember Me\"\n                    />\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={onLoginRequest} color=\"primary\" variant=\"contained\">\n                        Login\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport { Button, TextField, Dialog, DialogActions, DialogTitle, DialogContent, DialogContentText, Typography } from '@material-ui/core';\nimport APIService from './utils/APIService';\n\nfunction LoginPage(props) {\n    const [emailError, setEmailError] = useState(false);\n    const [nameError, setNameError] = useState(false);\n    const [passwordError, setPasswordError] = useState(false);\n    const [validate, setValidate] = useState(false);\n\n    const [signupSuccessful, setSignupSuccessful] = useState(false);\n\n    const [user_email, setUserEmail] = useState('');\n    const [user_name, setUserName] = useState('');\n    const [user_pass, setUserPass] = useState('');\n\n    const onChange_user_email = (e) => {\n        setUserEmail(e.target.value);\n    }\n    const onChange_user_name = (e) => {\n        setUserName(e.target.value);\n    }\n    const onChange_user_pass = (e) => {\n        setUserPass(e.target.value);\n    }\n\n\n    const onSignupRequest = () => {\n        const signupRequest = {\n            user_name: user_name,\n            user_email: user_email,\n            user_pass: user_pass,\n        };\n        APIService.sign_up(signupRequest)\n            .then(response => {\n                console.log(response)\n\n                if (response.success) {\n                    setUserEmail('')\n                    setUserName('')\n                    setUserPass('')\n\n                    setValidate(false)\n\n                    setSignupSuccessful(true)\n                    //props.handleClose();\n                }\n\n                if (!response.success) {\n                    setEmailError(response.user_email_error)\n                    setPasswordError(response.user_pass_error)\n                    setNameError(response.user_name_error)\n                    setValidate(true)\n                }\n\n            });\n    };\n\n    const nameErrorMessage = {\n        'length': 'Names need to be at least 5 characters long.',\n        'exists': 'Username is already taken.'\n    }\n\n    const emailErrorMessage = {\n        'format': 'Please enter a valid email address.',\n        'exists': 'Email is already registered.'\n    }\n\n    const passwordErrorMessage = {\n        'length': 'Passphrase must be at least 5 characters long.',\n    }\n\n\n    return (\n        <React.Fragment>\n            <Dialog open={props.open} onClose={props.handleClose} aria-labelledby=\"form-dialog-title\">\n\n                <DialogTitle id=\"form-dialog-title\">Sign up</DialogTitle>\n\n\n                <DialogContent>\n                    {!signupSuccessful &&\n                        <>\n                            <DialogContentText>\n                                Sign up for a new account to save your pages and plates for later.\n                            </DialogContentText>\n\n                            <TextField\n                                required\n                                error={validate && nameError}\n                                onChange={onChange_user_name}\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"Username\"\n                                type=\"text\"\n                                fullWidth\n                            />\n\n                            {validate &&\n                                <Typography>{nameErrorMessage[nameError]}</Typography>\n                            }\n\n                            <TextField\n                                required\n                                error={validate && emailError}\n                                onChange={onChange_user_email}\n                                margin=\"dense\"\n                                id=\"email\"\n                                label=\"Email Address\"\n                                type=\"email\"\n                                fullWidth\n                            />\n\n                            {validate &&\n                                <Typography>{emailErrorMessage[emailError]}</Typography>\n                            }\n\n\n\n                            <TextField\n                                required\n                                error={validate && passwordError}\n                                onChange={onChange_user_pass}\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                fullWidth\n                            />\n\n                            {validate &&\n                                <Typography>{passwordErrorMessage[passwordError]}</Typography>\n                            }\n                        </>}\n\n                    {signupSuccessful &&\n                        <>\n                            <DialogContentText>\n                                Sign up successful. Please log in to use all features.\n                            </DialogContentText>\n                        </>}\n                </DialogContent>\n\n                <DialogActions>\n                    {!signupSuccessful &&\n                        <>\n                    <Button onClick={props.handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={onSignupRequest} color=\"primary\" variant=\"contained\">\n                        Sign Up\n                    </Button>\n                    </>}\n\n                    {signupSuccessful &&\n                        <>\n                    <Button onClick={props.handleClose} color=\"primary\" variant=\"contained\">\n                        Close\n                    </Button>\n                    </>}\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport { Typography, Button } from '@material-ui/core';\nimport APIService from './utils/APIService';\n\n\n/* const [activePlate, setActivePlate] = useState('primary') */\n\n\nclass PageSelectObject extends React.Component {\n    constructor(props) {\n        super(props);\n        /*\n        this.openPlateMenuHandler = this.openPlateMenuHandler.bind(this);\n        this.closePlateMenuHandler = this.closePlateMenuHandler.bind(this);\n        */\n        this.onSelectHandler = this.onSelectHandler.bind(this);\n\n        this.state = {\n            // plateMenuPosition: null,\n            isActivePage: false,\n            selectColor: \"primary\",\n        };\n    }\n\n    /*\n    onDeleteHandler() {\n        console.log(`plateObject.js; delete plate ${this.props.id}`)\n        this.props.handlePlateChange(false)\n        this.props.deletePlate(this.props.id)\n        //APIService.deletePlate({plate_id: this.props.id})\n    }\n    */\n\n    componentDidUpdate(prevProps, prevState) {\n        const activePageChanged = prevProps.activePage !== this.props.activePage;\n\n        // const plateMenuChanged = prevState.plateMenuIsOpen !== this.state.plateMenuIsOpen;\n\n        if (activePageChanged) {\n            this.props.activePlate === this.props.id ? this.setState({ selectColor: \"secondary\" }) : this.setState({ selectColor: \"primary\" })\n\n            // console.log('PageSelectObj; triggered update function')\n        }\n    }\n\n\n    onSelectHandler() {\n        this.setState({ isActivePage: true })\n        this.props.handlePageChange(this.props.id)\n        this.props.setActivePage_name(this.props.name)\n        //this.state.isActivePlate ? this.setState({ selectColor: \"secondary\" }) : this.setState({ selectColor: \"primary\" }) \n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Button\n                    onClick={this.onSelectHandler}\n                    //variant='contained'\n                    //variant='text'\n                    /*color={activePlate}*/\n                    color={this.state.selectColor}\n                    fullWidth={true}\n                    textAlign='left'\n                    size='medium'\n                    style={{ textTransform: 'none', justifyContent: \"flex-start\" }}\n                >\n                    {this.props.name}\n                </Button>\n\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PageSelectObject;","import React, {useState} from 'react';\nimport Drawer from '@mui/material/Drawer';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport uid from './NotionClone/utils/uid';\nimport { Typography, Button } from '@mui/material';\nimport PageSelectObject from './PageSelectObject';\nimport APIService from './utils/APIService';\n\nconst SideBar = (props) => {\n    const [openPosition, setOpenPosition] = useState(false);\n\n    const handleSideBarClose = () => {\n        props.setSideBarOpen(false)\n    }\n\n    const handlePageChange = (page_id) => {\n        // console.log(page_id);\n        props.updateActivePage(page_id);\n        props.setSideBarOpen(false)\n\n    }\n\n    const addPageHandler = () => {\n        const newPage = {id: uid()}\n        APIService.addNewPage(newPage)\n        .then(response => {\n            props.updateActivePage(response.activePage)\n            props.handleSetPages(response.pages)\n            props.setActivePage_name(response.name)\n        })\n    }\n\n    // const [pageList, setPageList] = useState(['page1', 'page2', 'page3'])\n\n    return (\n        <Drawer\n            open={'left'}\n            anchor={'left'}\n            onClose={handleSideBarClose}\n        \n        >\n        <Box\n            sx={{width: 250}}\n        >\n                <Typography variant='h6' sx={{ pt: 1, pl: 2 }} >Pages:</Typography>\n                <Button onClick={addPageHandler}>\n                    Add page\n                </Button>\n            <List>\n            {props.pages.map((page, index) => (\n                <PageSelectObject\n                    handlePageChange={handlePageChange}\n                    setActivePage_name={props.setActivePage_name}\n                \n                    name={page.name}\n                    id={page.id}\n                    \n                />\n                /*\n                <ListItem button key={index} onClick={handlePageChange}>\n                    <ListItemText primary={page.name} />\n                </ListItem>\n                */\n            ))}\n            </List>\n        </Box>\n        </Drawer>\n    );\n}\n\nexport default SideBar;","import './App.css';\nimport React, {useEffect, useState} from 'react';\nimport SplitPane, {Pane} from 'react-split-pane';\n// components\nimport Inspector from './components/Inspector';\nimport Notes from './components/Notes';\nimport ButtonAppBar from './components/ButtonAppBar';\nimport LoginPage from './components/LoginPage';\nimport SignupPage from './components/SignupPage';\nimport SideBar from './components/SideBar';\n\nimport uid from \"./components/NotionClone/utils/uid\";\nimport APIService from './components/utils/APIService';\nimport { Typography } from '@material-ui/core';\n\n\n// import { makeStyles } from '@material-ui/core/styles';\n\n// import NavBar from './components/NavBar';\n\nconst styleTextPanel = { background: '#eee', overflowY: 'scroll' };\nconst styleSidePanel = { overflowY: 'scroll' };\n\n// const initialBlock = { id: uid(), html: \"log in to retrieve your page\", tag: \"p\", isPlate: false };\n\n\nfunction App() {\n  // user name and is logged in\n  const [currentUsername, setCurrentUsername] = useState('Anon')\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  const [sideBarOpen, setSideBarOpen] = useState(false)\n\n  // blocks to pass to page\n  const [blocks, setBlocks] = useState([''])\n  const handleSetBlocks = (new_blocks) => {\n    setBlocks(new_blocks)\n    console.log('app.js; handleSetBlocks: ', blocks)\n  }\n\n  // pages update upon login (and for page adding?)\n  const [pages, setPages] = useState([''])\n  const handleSetPages = (new_pages) => {\n    setPages(new_pages)\n    console.log('app.js; handleSetPages: ', pages)\n  }\n\n\n  // dark mode toggle state\n  const [darkMode, setDarkMode] = useState(false);\n  const changeMode = () => {\n    setDarkMode((prev) => !prev)\n  }\n\n  // active plate tracking\n  const [activePlate, setActivePlate] = useState(null);\n  const updateActivePlate = (id) => {\n    setActivePlate(id)\n    console.log('app.js; updateActivePlate: ', activePlate)\n  }\n\n  // active page tracking\n  const [activePage_name, setActivePage_name] = useState(null);\n  const [activePage, setActivePage] = useState(null);\n  const updateActivePage = (id) => {\n    setActivePage(id)\n    console.log('app.js; updateActivePage: ', id)\n    APIService.switchPage({ page_id: id})\n    .then(response => {\n      handleSetBlocks(response.blocks)\n    })\n    updateActivePlate(null)\n  }\n\n  const [destinationPlate, setDestinationPlate] = useState('');\n  const [inducerMixVolume, setInducerMixVolume] = useState('');\n  const [finalVolume, setFinalVolume] = useState('');\n  const [dilutionFactor, setDilutionFactor] = useState('');\n\n\n  // tracking metadata and chemicals across plates\n  const [chemicals, setChemicals] = useState([])\n  const [metadata, setMetadata] = useState()\n\n  const updateChemicalHandler = (currentChemical) => {\n    // console.log('triggered updateChemicalHandler in SetUp.js')\n    console.log('app.js; updateChemicalHandler: currentChemical: ', currentChemical)\n    const index = chemicals.map((chemical) => chemical.id).indexOf(currentChemical.id)\n    const updatedChemicals = [...chemicals];\n    updatedChemicals[index] = {\n      ...updatedChemicals[index],\n      name: currentChemical.name,\n      low_conc: currentChemical.low_conc,\n      high_conc: currentChemical.high_conc,\n      conc_list: currentChemical.conc_list,\n      n_conditions: currentChemical.n_conditions,\n      exclude_neg_control: currentChemical.exclude_neg_control,\n      log_scale: currentChemical.log_scale,\n\n      manualSetup: currentChemical.manualSetup,\n\n      // for labware setup:\n      stock_concentration: currentChemical.stock_concentration,\n      source_labware: currentChemical.source_labware,\n\n    };\n    setChemicals(updatedChemicals);\n    //setChemicals(updatedChemicals);\n\n    console.log('app.js; updateChemicalHandler: updatedChemicals: ', updatedChemicals)\n\n\n    //const oldMetadata = { blank_border: blank_border, well_number: well_number, replicate_number: replicate_number }\n    // const oldChemicals = chemicals  // no idea why you need to do this const thing...\n    // console.log('app.js; updateChemicalHandler: oldChemicals: ', oldChemicals)\n    \n    // setMetadata(metadata)\n    console.log('app.js; updateChemicalHandler: metadata: ', metadata)\n    if (activePlate) {\n      console.log('triggered PostPlates')\n      APIService.PostPlates({\n        plate_id: activePlate,\n        page_id: activePage,\n        chemicals: updatedChemicals,\n        //metadata: metadata\n      }).then(response => console.log('app.js; updateChemicalHandler: ', response))\n    };\n  }\n  /*\n  useEffect(() => {\n    // const oldMetadata = { blank_border: blank_border, well_number: well_number, replicate_number: replicate_number }\n    const oldChemicals = chemicals  // no idea why you need to do this const thing...\n\n    APIService.PostPlates({\n      plate_id: activePlate,\n      chemicals: oldChemicals,\n      metadata: metadata,\n    })\n\n  }, [chemicals, activePlate, metadata])\n  */\n  const [well_number, setwell_number] = useState(96)\n  const [blank_border, setblank_border] = useState(true)\n  const [replicate_number, setreplicate_number] = useState(2)\n\n  \n  // FUNCTION STRUCTURE FOR PLATE UPDATE\n  const handlePlateChange = (id) => {\n    \n    console.log('app.js; handlePlateChange: old plate: ', activePlate)\n    console.log('app.js; handlePlateChange: new plate: ', id)\n    /*\n    const oldMetadata = {blank_border: blank_border, well_number: well_number, replicate_number: replicate_number}\n    const oldChemicals = chemicals  // no idea why you need to do this const thing...\n    //setMetadata(oldMetadata)\n    console.log('old metadata to push:')\n    console.log(oldMetadata)\n    console.log('old chemicals to push:')\n    console.log(oldChemicals)\n    \n    // API pushplate, if plate id exists.\n    \n    if (activePlate) {\n      console.log('triggered PostPlates')\n      APIService.PostPlates({\n        plate_id: activePlate,\n        chemicals: oldChemicals,\n        metadata: oldMetadata\n      })\n    };*/\n    // update plate_id\n    setActivePlate(id)\n    // API getplate\n    if (id) {\n      console.log('triggered app.js; GetPlate')\n      APIService.GetPlate({plate_id: id})\n      // update State based on response\n    .then(response => {\n      //console.log('app.js; handlePlateChange: ', response)\n      console.log('app.js; handlePlateChange, metadata: ', response.metadata)\n\n      //console.log(chemicals)\n      setChemicals(response.chemicals)\n      //console.log('app.js; handlePlateChange, chemicals: ', response.chemicals)\n      setMetadata(response.metadata)\n      setwell_number(response.metadata['well_number'])\n      setblank_border(response.metadata['blank_border'])\n      setreplicate_number(response.metadata['replicate_number'])\n      setDiluentLabware(response.diluent_info['diluent_labware'])\n\n      setDestinationPlate(response.loading_info['destination_plate'])\n      setInducerMixVolume(response.loading_info['inducer_mix_volume'])\n      setFinalVolume(response.loading_info['final_volume'])\n      setDilutionFactor(response.loading_info['dilution_factor'])\n\n\n      // pipette setup if you want to save to a plate...\n      /*\n      setPipetteLeft(response.pipette_setup['pipette_left'])\n      setPipetteRight(response.pipette_setup['pipette_right'])\n      setTipTypeLeft(response.pipette_setup['tip_type_left'])\n      setTipTypeRight(response.pipette_setup['tip_type_right'])\n      setTipsLeft(response.pipette_setup['tips_left'])\n      setTipsRight(response.pipette_setup['tips_right'])\n      */\n    }).catch(error => {\n      console.log(error)\n      //setwell_number(metadata['well_number'])\n      //setblank_border(metadata['blank_border'])\n      //setreplicate_number(metadata['replicate_number'])\n    });\n    // everything working, but state does not update fields in SetUp properly...\n    // fix init by init by pushing to API at addBlock handler too.  \n  };\n  }\n\n\n\n\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [openSignUp, setOpenSignUp] = useState(false);\n  const handleClickOpenSignUp = () => {\n    setOpenSignUp(true);\n  };\n  const handleCloseSignUp = () => {\n    setOpenSignUp(false);\n  };\n\n  // ===================\n  // AUTOLOAD CONSTANTS\n  // ===================\n\n  // PIPETTE SETUP\n  const [pipette_left, setPipetteLeft] = useState('');\n  const [pipette_right, setPipetteRight] = useState('');\n\n  const [tip_type_left, setTipTypeLeft] = useState('');\n  const [tip_type_right, setTipTypeRight] = useState('');\n\n  const [tips_left, setTipsLeft] = useState('');\n  const [tips_right, setTipsRight] = useState('');\n\n  const [diluentLabware, setDiluentLabware] = useState('');\n\n\n  \n   //resizable split view\n  return (\n    \n    <React.Fragment>\n      \n      <ButtonAppBar\n        darkMode={darkMode}\n        setDarkMode={setDarkMode}\n        changeMode={changeMode}\n        handleClickOpen={handleClickOpen}\n        handleClickOpenSignUp={handleClickOpenSignUp}\n        setCurrentUsername={setCurrentUsername}\n        setIsLoggedIn={setIsLoggedIn}\n        setActivePlate={setActivePlate}\n        isLoggedIn={isLoggedIn}\n        currentUsername={currentUsername}\n        handleSetBlocks={handleSetBlocks}\n        \n        sideBarOpen={sideBarOpen}\n        setSideBarOpen={setSideBarOpen}\n      />\n\n      <LoginPage\n        open={open}\n        handleClickOpen={handleClickOpen}\n        handleClose={handleClose}\n        \n        handleSetBlocks={handleSetBlocks}\n        setCurrentUsername={setCurrentUsername}\n        setIsLoggedIn={setIsLoggedIn}\n\n        updateActivePage={updateActivePage}\n        handleSetPages={handleSetPages}\n      />\n      \n      <SignupPage\n        open={openSignUp} \n        handleClickOpen={handleClickOpenSignUp}\n        handleClose={handleCloseSignUp}\n        \n        setCurrentUsername={setCurrentUsername}\n        setIsLoggedIn={setIsLoggedIn}\n        handleSetBlocks={handleSetBlocks}\n      />\n      { sideBarOpen &&\n        <SideBar\n          setSideBarOpen={setSideBarOpen}\n\n          activePage={activePage}\n          updateActivePage={updateActivePage}\n\n          setActivePage_name={setActivePage_name}\n\n          pages={pages}\n          handleSetPages={handleSetPages}\n        />\n      }\n\n\n      { isLoggedIn ?\n      <div className=\"mainWindow\">\n      <SplitPane split=\"vertical\" defaultSize = {'50%'} pane1Style = {styleTextPanel} pane2Style = {styleSidePanel}>\n        <Pane>\n          <Notes\n            activePlate={activePlate}\n            setActivePlate={setActivePlate}\n            updateActivePlate={updateActivePlate}\n            blocks={blocks}\n            handleSetBlocks={handleSetBlocks}\n            isLoggedIn={isLoggedIn}\n            handlePlateChange={handlePlateChange}\n\n            activePage={activePage}\n            handleSetPages={handleSetPages}\n            \n            activePage_name={activePage_name}\n            setActivePage_name={setActivePage_name}\n          />\n        </Pane>\n        <Pane>\n          <Inspector\n            activePlate={activePlate}\n            activePage={activePage}\n\n            handlePlateChange={handlePlateChange}\n            setChemicals={setChemicals}\n            chemicals={chemicals}\n            updateChemicalHandler={updateChemicalHandler}\n            \n            metadata={metadata}\n            setMetadata={setMetadata}\n            well_number={well_number}\n            setwell_number={setwell_number}\n            replicate_number={replicate_number}\n            setreplicate_number={setreplicate_number}\n            blank_border={blank_border}\n            setblank_border={setblank_border}\n\n            // autoload constants\n            destinationPlate={destinationPlate}\n            inducerMixVolume={inducerMixVolume}\n            finalVolume={finalVolume}\n            dilutionFactor={dilutionFactor}\n\n            setInducerMixVolume={setInducerMixVolume}\n            setDestinationPlate={setDestinationPlate}\n            setFinalVolume={setFinalVolume}\n            setDilutionFactor={setDilutionFactor}\n\n\n            pipette_left={pipette_left}\n            pipette_right={pipette_right}\n            tip_type_left={tip_type_left}\n            tip_type_right={tip_type_right}\n            tips_left={tips_left}\n            tips_right={tips_right}\n\n            setPipetteLeft={setPipetteLeft}\n            setPipetteRight={setPipetteRight}\n            setTipTypeLeft={setTipTypeLeft}\n            setTipTypeRight={setTipTypeRight}\n            setTipsLeft={setTipsLeft}\n            setTipsRight={setTipsRight}\n\n            diluentLabware={diluentLabware}\n            setDiluentLabware={setDiluentLabware}\n          />\n          </Pane>\n      </SplitPane>\n      </div>\n      :\n      <>\n      <Typography variant='h2'>Please log in to use AutoLoad</Typography>\n      </>\n      }\n    </React.Fragment>\n  );\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}